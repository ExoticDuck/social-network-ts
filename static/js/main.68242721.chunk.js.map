{"version":3,"sources":["Components/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Login/Login.module.css","Components/Users/Users.module.css","Components/Navbar/Navbar.module.css","reportWebVitals.ts","api/api.ts","redux/AuthReducer.ts","redux/MessagesReducer.ts","redux/ProfileReducer.ts","redux/SidebarReducer.ts","redux/UsersReducer.ts","redux/AppReducer.ts","redux/redux-store.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","utils/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.tsx","HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Navbar/Navbar.tsx","Components/Navbar/NavbarContainer.tsx","img/user.png","Components/Users/UsersAPIComponent.tsx","img/loader2.gif","Components/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProdileInfo/ProfileStatus.tsx","Components/Profile/ProdileInfo/ProfileInfo.tsx","Components/Profile/ProfileContainer.tsx","img/logo.png","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","App.tsx","index.tsx","Components/Profile/ProdileInfo/ProfileInfo.module.css","Components/Dialogs/Dialogs.module.css","utils/FormsControls/FormControl.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersApi","currentPage","pageSize","get","response","data","userId","profileApi","status","put","authApi","email","password","rememberMe","post","delete","followApi","SET_USER_DATA","initialState","id","login","isAuth","setUserData","type","payload","getAuthUserData","dispatch","resultCode","AuthReducer","state","action","SEND_MESSAGE","dialogsData","name","messagesData","text","MessagesReducer","length","newMessage","value","ADD_POST","SET_USER_PROFILE","SET_STATUS","postData","message","likesCount","profile","SetUserStatus","ProfileReducer","newPost","friends","link","SidebarReducer","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETHING","TOGGLE_FOLLOWING_IN_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","SetUsers","SetTotalUsersCount","totalCount","ToggleIsFetching","ToggleFollowingInProgress","following","UsersReducer","map","u","followed","filter","SET_INITIALIZED","initialized","AppReducer","reducers","combineReducers","profilePage","messagesPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","News","Music","Settings","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","maxLengthCreator","maxLength","requiredField","DialogItem","path","dialog","to","Message","maxLength100","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogItems","dialogsPage","d","messagesItems","m","dialogs","dialogs_items","messages","values","addMessage","newMessageBody","mapStateToProps","withAuthRedirect","Component","connect","DialogsContainer","compose","addMessageAC","Navbar","friendsItems","fr","friend","src","alt","nav","item","isActive","NavbarContainer","UsersAPIComponent","pagesCount","Math","ceil","pages","i","push","PagesContainer","page","onClick","e","onPageChanged","SelectedPage","user","UserCard","avatarBlock","Avatar","photos","small","userPic","infoBlock","userInfo","Status","location","followBox","disabled","some","FollowButton","unfollow","follow","Preloader","Loader","loader2","UsersClass","getUsers","SetCurrentPage","this","React","UsersContainer","setTimeout","items","Post","maxLength10","AddPostFormRedux","MyPosts","postsItems","posts","p","PostsContainer","addPost","MyPostsContainer","addPostAC","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeHandler","currentTarget","prevProps","prevState","onDoubleClick","autoFocus","onChange","onBlur","ProfileInfo","InfoContainer","ProfilePhoto","descriptionBlock","userFoto","description","Name","fullName","ProfileContainer","match","params","authorizedUserId","toString","history","getUserProfile","getUserStatus","mainContent","ProfileContainerCompose","withRouter","Header","header","reactLogo","LoginBlock","logout","HeaderContainer","LoginForm","formSummaryError","LoginReduxForm","stopSubmit","_error","LoginPage","formData","App","initializeApp","render","promise","Promise","all","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68242721.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Preloader_Loader__3O9yV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1v0_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"Login_LoginPage__1tX-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Users_Avatar__Uezqs\",\"followBox\":\"Users_followBox__G_ywg\",\"FollowButton\":\"Users_FollowButton__3tp_j\",\"UserCard\":\"Users_UserCard__1P3-U\",\"avatarBlock\":\"Users_avatarBlock__aj0Au\",\"userInfo\":\"Users_userInfo__34aiX\",\"Status\":\"Users_Status__3Bdku\",\"location\":\"Users_location__1rnO4\",\"infoBlock\":\"Users_infoBlock__1ZxRK\",\"page\":\"Users_page__19XVr\",\"SelectedPage\":\"Users_SelectedPage__oFelf\",\"PagesContainer\":\"Users_PagesContainer__2RkrP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__DF114\",\"item\":\"Navbar_item__EPJmQ\",\"active-link\":\"Navbar_active-link__3FqVw\",\"friend\":\"Navbar_friend__1GKxm\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c4deeac1-451b-4ef8-8dc8-a4ffeee3c9cc'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get(`https://social-network.samuraijs.com/api/1.0/auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const followApi = {\r\n    follow(userId: number) {\r\n        return instance.post(`/follow/${userId}`, {}, {})\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`/follow/${userId}`)\r\n    }\r\n}\r\n\r\n","import { Dispatch } from \"redux\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { authApi } from \"../api/api\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\n\r\ntype initialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst AuthReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setUserDataACType | FormAction;\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setUserDataACType = ReturnType<typeof setUserData>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, GeneralACType>;\r\n\r\nexport const getAuthUserData = ():ThunkType => (dispatch) => {\r\n    debugger\r\n        authApi.getMe()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let { id, email, login } = response.data.data;\r\n                    dispatch(setUserData(id, email, login, true));\r\n                }\r\n            })\r\n    }\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n    return (dispatch) => {\r\n        authApi.login(email, password, rememberMe)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", {_error: message}));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authApi.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserData(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default AuthReducer;","import {MessagePageType} from \"./store\"\r\n\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState: MessagePageType = {\r\n    dialogsData: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Andrey\" },\r\n        { id: 3, name: \"Sveta\" },\r\n        { id: 4, name: \"Sasha\" },\r\n        { id: 5, name: \"Viktor\" },\r\n        { id: 6, name: \"Valery\" },\r\n    ],\r\n    messagesData: [\r\n        { id: 1, text: \"Hi\" },\r\n        { id: 2, text: \"How are you?\" },\r\n        { id: 3, text: \"What are you doing?\" },\r\n        { id: 4, text: \"Hello my friend;)\" },\r\n        { id: 5, text: \"Yo!\" },\r\n        { id: 6, text: \"Goodbye!\" },\r\n    ]\r\n}\r\n\r\nconst MessagesReducer = (state: MessagePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let id = state.messagesData.length + 1;\r\n            let newMessage = {id: id, text: action.payload.value};\r\n            return {...state, messagesData: [...state.messagesData, newMessage]}\r\n            \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType =  addMessageACType;\r\n\r\nexport type addMessageACType = ReturnType<typeof addMessageAC>\r\nexport const addMessageAC = (value: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        payload: {\r\n            value\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default MessagesReducer;","import { Dispatch } from \"redux\";\r\nimport { profileApi, usersApi } from \"../api/api\";\r\nimport { PostType } from \"./store\";\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-USER-STATUS\";\r\n\r\ntype ContactsType = {\r\n    facebook: string | null;\r\n    website: string | null;\r\n    vk: string | null;\r\n    twitter: string | null;\r\n    instagram: string | null;\r\n    youtube: string | null;\r\n    github: string | null;\r\n    mainLink: string | null;\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype ProfilePageType = {\r\n    postData: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    postData: [\r\n        { id: 1, message: \"hi, how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"it is my firt post\", likesCount: 15 },\r\n        { id: 2, message: \"aaaaaa\", likesCount: 1 }\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let id = state.postData.length + 1;\r\n            let newPost = { id: id, message: action.payload.text, likesCount: 0 };\r\n            return { ...state, postData: [...state.postData, newPost]};\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.payload.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            debugger\r\n            return {...state, status: action.payload.status}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType = addPostACType | SetUserProfileACType | SetUserStatusACType;\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (text: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: {\r\n            text\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetUserProfileACType = ReturnType<typeof SetUserProfile>\r\nexport const SetUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {\r\n            profile: profile\r\n        }\r\n    } as const\r\n}\r\nexport type SetUserStatusACType = ReturnType<typeof SetUserStatus>\r\nexport const SetUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        payload: {\r\n            status: status\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: Dispatch) => usersApi.getProfile(userId)\r\n    .then(\r\n        response => {\r\n        dispatch(SetUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return (dispatch: Dispatch) => profileApi.getStatus(userId)\r\n    .then(response =>{\r\n        debugger\r\n        dispatch(SetUserStatus(response.data))\r\n    })\r\n        \r\n        \r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => profileApi.updateStatus(status)\r\n    .then(response => {\r\n        debugger\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(SetUserStatus(status))\r\n        }\r\n    })\r\n}\r\n\r\nexport default ProfileReducer;","import {SidebarPageType } from \"./store\"\r\n\r\nlet initialState: SidebarPageType = {\r\n    friends: [\r\n        { id: 1, name: \"Dimych\", link: \"https://cs6.pikabu.ru/avatars/404/x404070-828004264.png\" },\r\n        { id: 2, name: \"Andrey\", link: \"https://aftershock.news/sites/default/files/pictures/picture-42471-1586248390.jpg\" },\r\n        { id: 3, name: \"Sveta\", link: \"https://www.meme-arsenal.com/memes/cdfd31e349e0124972afec8440807b32.jpg\" }\r\n    ]\r\n}\r\n\r\nconst SidebarReducer = (state: SidebarPageType = initialState, action: GeneralACType) => {\r\n\r\n    return state\r\n}\r\n\r\ntype GeneralACType = void;\r\n\r\nexport default SidebarReducer;","import { Dispatch } from \"redux\"\r\nimport { followApi, usersApi } from \"../api/api\"\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = \"TOGGLE-FOLLOWING-IN-PROGRESS\"\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: null,\r\n    photos: {\r\n        small: null | any,\r\n        large: null | any\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: UsersPageType = initialState, action: UsersACType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.payload.id) {\r\n                        let userCopy = { ...u, followed: true };\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.payload.id) {\r\n                        let userCopy = { ...u, followed: false };\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.payload.users]\r\n            };\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.payload.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.payload.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.following ? [...state.followingInProgress, action.payload.userId] : [...state.followingInProgress.filter(id => id !== action.payload.userId)]\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type UsersACType = FollowACType | UnfollowACType | SetUsersACType | SetCurrentPageACType | SetTotalUsersCountACType | ToggleIsFetchingACType | ToggleFollowingInProgressACType;\r\n\r\nexport type FollowACType = ReturnType<typeof Follow>\r\nexport const Follow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type UnfollowACType = ReturnType<typeof Unfollow>\r\nexport const Unfollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type SetUsersACType = ReturnType<typeof SetUsers>\r\nexport const SetUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users: users\r\n        }\r\n    } as const\r\n}\r\nexport type SetCurrentPageACType = ReturnType<typeof SetCurrentPage>\r\nexport const SetCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport type SetTotalUsersCountACType = ReturnType<typeof SetTotalUsersCount>\r\nexport const SetTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleIsFetchingACType = ReturnType<typeof ToggleIsFetching>\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETHING,\r\n        payload: {\r\n            isFetching: isFetching\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleFollowingInProgressACType = ReturnType<typeof ToggleFollowingInProgress>\r\nexport const ToggleFollowingInProgress = (following: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n        payload: {\r\n            following,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleIsFetching(true));\r\n        usersApi.getUsers(currentPage, pageSize).then(\r\n            data => {\r\n                setTimeout(() => dispatch(ToggleIsFetching(false)), 200)\r\n                // this.props.toggleIsFetching(false)\r\n                dispatch(SetUsers(data.items));\r\n                dispatch(SetTotalUsersCount(data.totalCount));\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleFollowingInProgress(true, userId))\r\n        followApi.follow(userId).then(response => {\r\n            debugger\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(Follow(userId));\r\n            }\r\n            dispatch(ToggleFollowingInProgress(false, userId));\r\n        })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleFollowingInProgress(true, userId))\r\n        followApi.unfollow(userId).then(response => {\r\n            debugger\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(Unfollow(userId));\r\n            }\r\n            dispatch(ToggleFollowingInProgress(false, userId));\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default UsersReducer;","import { Dispatch } from \"redux\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { authApi } from \"../api/api\"\r\nimport { AppStateType } from \"./redux-store\"\r\nimport { getAuthUserData } from './AuthReducer';\r\n\r\nconst SET_INITIALIZED = \"SET-INITIALIZED\";\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst AppReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setInitializedACType;\r\n\r\nexport const setInitialized = () => {\r\n    return {\r\n        type: SET_INITIALIZED\r\n    } as const\r\n}\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, GeneralACType>;\r\nexport type setInitializedACType = ReturnType<typeof setInitialized>\r\n\r\nexport const initializeApp = ():ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n    dispatch(setInitialized())\r\n  });\r\n}\r\n\r\nexport default AppReducer;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport MessagesReducer from \"./MessagesReducer\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport SidebarReducer from \"./SidebarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer } from 'redux-form';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    sidebar: SidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    form: formReducer, \r\n    app: AppReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./FormControl.module.css\"\r\n\r\nconst FormControl = ({ input, meta, child, ...props }: any) => {\r\n    let hasError = meta.touched && meta.error; \r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n            {props.children}\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n    )\r\n}\r\n\r\n","import { AddPostDataType } from \"../../Components/Profile/MyPosts/MyPosts\";\r\n\r\nexport {}\r\ntype GeneralValuesType = AddPostDataType;\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport const requiredField = (value: string) => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n        return \"Field is required\";\r\n}\r\n\r\n","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {\r\n    MessagePageType\r\n} from '../../redux/store';\r\nimport s from './Dialogs.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../utils/FormsControls/FormsControls';\r\nimport { requiredField } from '../../utils/validators/validators';\r\nimport { maxLengthCreator } from './../../utils/validators/validators';\r\n\r\nexport type DialogsPropsType = {\r\n    addMessage: (value: string) => void\r\n    updateNewMessageText: (text: string) => void\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialgs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogItems = props.dialogsPage.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} />);\r\n    let messagesItems = props.dialogsPage.messagesData.map((m) => <Message text={m.text} />);\r\n\r\n    let addNewMessage = (values: AddMessageType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype AddMessageType = {\r\n    newMessageBody: string\r\n}\r\nlet maxLength100 = maxLengthCreator(100);\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' component={Textarea} placeholder=\"Enter your message\" \r\n                validate={[requiredField, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { Component, ComponentType } from \"react\"\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if(!isAuth) return <Redirect to=\"/login\"/>\r\n        \r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n    return ConnectedRedirectComponent;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { addMessageAC} from '../../redux/MessagesReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessagePageType } from '../../redux/store';\r\nimport Dialogs, { DialogsPropsType } from './Dialogs';\r\nimport { withAuthRedirect } from './../../HOC/WithAuthRedirect';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => { //принимает в параметры state\r\n    return { //для данных из стейта \r\n        dialogsPage: state.messagesPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return { //для коллбэков\r\n        addMessage: (value: string) => {dispatch(addMessageAC(value))}\r\n    }\r\n}\r\n\r\nlet DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\"\r\nimport '../../App.css';\r\nimport { SidebarPageType } from '../../redux/store';\r\n\r\ntype NavbarPropsType = {\r\n  state: SidebarPageType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n\r\n  let friendsItems = props.state.friends.map((fr) => {\r\n    return <div className={s.friend}><img src={fr.link} alt=\"img\"/>{fr.name}</div>\r\n  })\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile/:userId\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" className={(isActive) => isActive ? \"active-link\" : \"\"}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Settings</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <div className={s.friends}>Friends</div>\r\n        {friendsItems}\r\n      </div>\r\n    </nav>);\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { SidebarPageType } from '../../redux/store';\r\nimport Navbar from './Navbar';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: SidebarPageType\r\n} \r\n\r\ntype mapDispatchToPropsType = {}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {}\r\n}\r\n\r\nlet NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","export default __webpack_public_path__ + \"static/media/user.02d5ce4f.png\";","import React from \"react\";\r\nimport { UserType } from \"../../redux/UsersReducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPic from \"../../img/user.png\"\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type UsersAPIPropsType = {\r\n    users: Array<UserType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst UsersAPIComponent = (props: UsersAPIPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    pages.length = 20\r\n    //console.log(props.totalUsersCount);\r\n    return (\r\n        <div>\r\n            <div className={s.PagesContainer}>\r\n                {\r\n                    pages.map(page => <span onClick={(e) => { props.onPageChanged(page) }} className={props.currentPage === page ? s.SelectedPage : s.page}>{page} </span>)\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(user => <div key={user.id} className={s.UserCard}>\r\n                    <span className={s.avatarBlock}>\r\n                        <div className={s.Avatar}>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPic} alt=\"Avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </span>\r\n                    <div className={s.infoBlock}>\r\n                        <span className={s.userInfo}>\r\n                            <div>{user.name}</div>\r\n                            <div className={s.Status}>{user.status}</div>\r\n                        </span>\r\n                        <span className={s.location}>\r\n                            <div>{'Country'}</div>\r\n                            <div>{'City'}</div>\r\n                        </span>\r\n                        <div className={s.followBox}>\r\n                            {\r\n                                user.followed ? <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    props.unfollow(user.id)\r\n                                }}>Unfollow</button> : <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    props.follow(user.id)\r\n                                }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersAPIComponent;","export default __webpack_public_path__ + \"static/media/loader2.f396a593.gif\";","import React from \"react\";\r\nimport loader2 from \"../../img/loader2.gif\"\r\nimport s from \"./Preloader.module.css\"\r\n\r\ntype PreloaderPropsType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderPropsType) => {\r\n    return(\r\n        <div>\r\n            <img className={s.Loader} src={loader2} alt=\"loader\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { follow, getUsers, SetCurrentPage, SetTotalUsersCount, SetUsers, ToggleIsFetching, unfollow, UserType } from \"../../redux/UsersReducer\";\r\nimport UsersAPIComponent from \"./UsersAPIComponent\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport { ToggleFollowingInProgress } from './../../redux/UsersReducer';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\n// type mapDispatchToPropsType = {\r\n//     follow: (id: number) => void\r\n//     unfollow: (id: number) => void\r\n//     setUsers: (users: Array<UserType>) => void\r\n//     setCurrentPage: (currentPage: number) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     toggleIsFetching: (isFetching: boolean) => void\r\n// }\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    isFetching: boolean\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    SetUsers: (users: Array<UserType>) => void\r\n    SetCurrentPage: (currentPage: number) => void\r\n    SetTotalUsersCount: (totalCount: number) => void\r\n    ToggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: number[]\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n}\r\n\r\nclass UsersClass extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize); \r\n        //*передаем параметры для thunk-creator \r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize); \r\n        this.props.SetCurrentPage(page);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <UsersAPIComponent\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    onPageChanged={this.onPageChanged}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow} \r\n                    ToggleFollowingInProgress={this.props.ToggleFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {follow, \r\n    unfollow, SetUsers, SetCurrentPage, SetTotalUsersCount, \r\n    ToggleIsFetching, ToggleFollowingInProgress, getUsers})(UsersClass);","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n            <div className={s.item}><img src=\"https://cs13.pikabu.ru/avatars/2487/x2487329-146029786.png\" alt=\"avatar\"></img>\r\n                {props.message}  \r\n                <span className={s.likesCount}>{props.likesCount} likes</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { requiredField, maxLengthCreator } from './../../../utils/validators/validators';\r\nimport { Textarea } from '../../../utils/FormsControls/FormsControls';\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let postsItems = props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let addNewPost = (values: AddPostDataType) => {\r\n        props.addPost(values.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.PostsContainer}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type AddPostDataType = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddPostForm: React.FC<InjectedFormProps<AddPostDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='post' component={Textarea} validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddPostFormRedux = reduxForm<AddPostDataType>({\r\n    form: \"addPostForm\"\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addPostAC } from '../../../redux/ProfileReducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../redux/store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (text: string) => {dispatch(addPostAC(text))}\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React, { ChangeEvent } from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\n\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (userId: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state = { \r\n        editMode: false, \r\n        status: this.props.status\r\n    };\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: {editMode: boolean, status: string}) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={() => {this.activateEditMode()}}>{this.props.status || \"status\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input value={this.state.status} autoFocus onChange={this.onChangeHandler} onBlur={() => {this.deactivateEditMode()}}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default ProfileStatus;","import React from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatus from './ProfileStatus';\r\nimport userFoto from \"../../../img/user.png\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    updateUserStatus: (userId: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<any> = (props: ProfileInfoPropsType) => {\r\n    debugger\r\n    if(!props.profile) {\r\n        return <div><Preloader/></div>\r\n    }\r\n    return (\r\n        <div className={s.InfoContainer}>\r\n            <div className={s.ProfilePhoto}>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.Avatar}>\r\n                    <img src={props.profile.photos.small || userFoto} alt=\"\" />\r\n                </div>\r\n                <div className={s.description}>\r\n                    <div className={s.Name}>{props.profile.fullName}</div>\r\n                    <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { getUserStatus, ProfileType, updateUserStatus} from \"../../redux/ProfileReducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProdileInfo/ProfileInfo\";\r\nimport s from \"./Profile.module.css\";\r\nimport { getUserProfile } from './../../redux/ProfileReducer';\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType = {\r\n    profile: ProfileType | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (userId: string) => void\r\n    match: any\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    history: any\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        let userId = this.props.match?.params.userId;\r\n        if (!userId || userId === \":userId\") {\r\n            userId = this.props.authorizedUserId.toString();\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className={s.mainContent}>\r\n                <ProfileInfo profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n                <MyPostsContainer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet ProfileContainerCompose = compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\nexport default ProfileContainerCompose;","export default __webpack_public_path__ + \"static/media/logo.5f0a2246.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\";\r\nimport reactLogo from '../../img/logo.png'\r\n\r\ntype HeaderPropsType = {\r\n  setUserData: (id: number | null, email: string | null, login: string | null) => void\r\n  logout: () => void\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nconst Header: React.FC<any> = (props: HeaderPropsType) => {\r\n  return <header className={s.header}>\r\n    <img src={reactLogo} alt=\"logo\" />\r\n    <div className={s.LoginBlock}>\r\n      {props.isAuth ? \r\n      <div>{props.login} <button onClick={props.logout}>Logout</button></div> : \r\n      <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n  </header>\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from './../../redux/AuthReducer';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype HeaderContainerPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport { Field, InjectedFormProps } from \"redux-form\";\r\nimport { Input } from \"../../utils/FormsControls/FormsControls\";\r\nimport { requiredField } from \"../../utils/validators/validators\";\r\nimport s from \"../../utils/FormsControls/FormControl.module.css\"\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Login\"} name={\"login\"} component={Input} \r\n                validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input} \r\n                 validate={[requiredField]} type={\"password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={\"input\"} name={\"rememberMe\"} type={\"checkbox\"} /> Remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}> {props.error} </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport LoginForm, { FormDataType } from \"./LoginForm\";\r\nimport s from './Login.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { login} from './../../redux/AuthReducer';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    debugger\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    let onSubmitHandler = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to=\"/profile\" />\r\n    \r\n\r\n    return (\r\n        <div className={s.LoginPage}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmitHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport './App.css';\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from './Components/Settings/Settings';\nimport { Route, withRouter } from 'react-router-dom'\nimport { StateType } from './redux/store';\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport { UsersContainer } from './Components/Users/UsersContainer';\nimport ProfileContainer from './Components/Profile/ProfileContainer';\nimport HeaderContainer from './Components/Header/HeaderContainer';\nimport Login from './Components/Login/Login';\nimport { connect } from 'react-redux';\nimport { getAuthUserData } from './redux/AuthReducer';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/AppReducer';\nimport { AppStateType } from './redux/redux-store';\nimport Preloader from './Components/Preloader/Preloader';\n\n//* урок 80 закончен\n\ntype AppPropsType = {\n  initializeApp: () => void\n  initialized: boolean\n}\n\n// const App: React.FC<AppPropsType> = (props) => {\n//   return (\n//       <div className=\"App\">\n//         <HeaderContainer/>\n//         <NavbarContainer />\n//         <div className=\"app-wrapper-content\">\n\n//           <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n//           <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n//           <Route path='/news'render={() => <News/>}/>\n//           <Route path='/music' render={() => <Music/>}/>\n//           <Route path='/settings' render={() => <Settings/>} />\n//           <Route path='/users' render={() => <UsersContainer/>} />\n//           <Route path='/login' render={() => <Login/>} />\n\n//         </div> \n//       </div>\n//   );\n// }\n\nclass App extends React.Component<AppPropsType, {}> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n  render() {\n    if(!this.props.initialized) {\n      return <Preloader/>\n    }\n    return (\n      <div className=\"App\">\n        <HeaderContainer />\n        <NavbarContainer />\n        <div className=\"app-wrapper-content\">\n\n          <Route path='/dialogs' render={() => <DialogsContainer />} />\n          <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\n          <Route path='/news' render={() => <News />} />\n          <Route path='/music' render={() => <Music />} />\n          <Route path='/settings' render={() => <Settings />} />\n          <Route path='/users' render={() => <UsersContainer />} />\n          <Route path='/login' render={() => <Login />} />\n\n        </div>\n      </div>\n    )\n  }\n}\n\ntype mapStateToPropsType = {\n  initialized: boolean\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    initialized: state.app.initialized\n  }\n}\n\nexport default compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StateType} from './redux/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n\n\n\n\n\nlet rerenderEntireTree = (state: StateType) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <Provider store={store}>\n          <App/>\n        </Provider>\n      </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1v9W_\",\"InfoContainer\":\"ProfileInfo_InfoContainer__3yQRD\",\"ProfilePhoto\":\"ProfileInfo_ProfilePhoto__227Ns\",\"Avatar\":\"ProfileInfo_Avatar__FpOi8\",\"description\":\"ProfileInfo_description__1rKpA\",\"Name\":\"ProfileInfo_Name__3Mhn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2R6vH\",\"dialogs_items\":\"Dialogs_dialogs_items__Ckxz2\",\"active\":\"Dialogs_active__oDa8w\",\"dialog\":\"Dialogs_dialog__25TZP\",\"messages\":\"Dialogs_messages__2x5Gv\",\"message\":\"Dialogs_message__LRm7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1ZzNG\",\"error\":\"FormControl_error__3dUKT\",\"formSummaryError\":\"FormControl_formSummaryError__ucq0Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2q_8H\",\"PostsContainer\":\"MyPosts_PostsContainer__1b_Xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ZUrT\",\"likesCount\":\"Post_likesCount__3XH3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3X5wX\",\"LoginBlock\":\"Header_LoginBlock__1lnVl\"};"],"sourceRoot":""}