{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProdileInfo/ProfileInfo.module.css","Components/Header/Header.tsx","redux/ProfileReducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProdileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/MessagesReducer.ts","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Navbar/Navbar.tsx","Components/Navbar/NavbarContainer.tsx","redux/UsersReducer.ts","img/user.png","Components/Users/UsersClass.tsx","Components/Users/UsersContainer.tsx","App.tsx","reportWebVitals.ts","redux/SidebarReducer.ts","redux/redux-store.tsx","index.tsx","Components/Navbar/Navbar.module.css","Components/Users/Users.module.css"],"names":["module","exports","Header","className","s","header","src","alt","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","postData","id","message","likesCount","newPostText","ProfileReducer","state","action","type","length","newPost","payload","newText","Post","props","item","MyPosts","postsItems","posts","map","p","onChange","e","text","currentTarget","value","updateNewPostText","onClick","addPost","MyPostsContainer","connect","profilePage","dispatch","updateNewPostTextAC","ProfileInfo","descriptionBlock","Profile","News","Music","Settings","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","dialogsData","name","messagesData","newMessageText","MessagesReducer","newMessage","DialogItem","path","dialog","to","Message","Dialogs","dialogItems","dialogsPage","d","messagesItems","m","dialogs","dialogs_items","messages","updateNewMessageText","addMessage","DialogsContainer","messagesPage","updateNewMessageTextAC","Navbar","friendsItems","friends","fr","friend","link","nav","isActive","NavbarContainer","sidebar","FOLLOW","UNFOLLOW","SET_USERS","users","UsersReducer","u","followed","UsersClass","axios","get","then","response","setUsers","data","items","this","user","UserCard","avatarBlock","Avatar","photos","small","userPic","FollowButton","unfollow","follow","infoBlock","userInfo","status","React","Component","UsersContainer","usersPage","FollowAC","UnfollowAC","SetUsersAC","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SidebarReducer","reducers","combineReducers","store","createStore","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1228cb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2R6vH\",\"dialogs_items\":\"Dialogs_dialogs_items__Ckxz2\",\"active\":\"Dialogs_active__oDa8w\",\"dialog\":\"Dialogs_dialog__25TZP\",\"messages\":\"Dialogs_messages__2x5Gv\",\"message\":\"Dialogs_message__LRm7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ZUrT\",\"likesCount\":\"Post_likesCount__3XH3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3X5wX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2q_8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1v9W_\"};","import React from 'react';\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header: React.FC<any> = () => {\r\n    return <header className={s.header}>\r\n    <img src='https://www.softermii.com/assets/uploads/blog/20181127/inner-05.png' alt=\"react-logo\"></img>\r\n  </header>\r\n}\r\nexport default Header;","import {ProfilePageType} from \"./store\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\nlet initialState: ProfilePageType = {\r\n    postData: [\r\n        { id: 1, message: \"hi, how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"it is my firt post\", likesCount: 15 },\r\n        { id: 2, message: \"aaaaaa\", likesCount: 1 }\r\n    ],\r\n    newPostText: \"\"\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let id = state.postData.length + 1;\r\n            let newPost = { id: id, message: state.newPostText, likesCount: 0 };\r\n            return {...state, postData: [...state.postData, newPost], newPostText: \"\"};\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {...state, newPostText: action.payload.newText};\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType = addPostACType | updateNewPostTextACType;\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\n\r\nexport type updateNewPostTextACType = ReturnType<typeof updateNewPostTextAC>\r\nexport const updateNewPostTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        payload: {\r\n            newText: text\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\nexport default ProfileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n            <div className={s.item}><img src=\"https://cs13.pikabu.ru/avatars/2487/x2487329-146029786.png\" alt=\"avatar\"></img>\r\n                {props.message}  \r\n                <span className={s.likesCount}>{props.likesCount} likes</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    let postsItems = props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    return (\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addPostAC, updateNewPostTextAC } from '../../../redux/ProfileReducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../redux/store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: () => {dispatch(addPostAC())},\r\n        updateNewPostText: (text: string) => {dispatch(updateNewPostTextAC(text))} \r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\n\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileInfo: React.FC<any> = () => {\r\n    return (\r\n        <div>\r\n        <div>\r\n            <img src='https://thumbs.dreamstime.com/b/большие-данные-и-интернет-тенденции-вещей-рабочее-место-специалисту-132754575.jpg' alt='aaa'/>\r\n        </div>\r\n            <div className={s.descriptionBlock}>\r\n                Ava + description\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { StoreType } from '../../redux/store';\r\n\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProdileInfo/ProfileInfo';\r\nimport s from \"./Profile.module.css\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n  store?: StoreType\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return (\r\n      <div className=\"main-content\">\r\n        <ProfileInfo/>\r\n        <MyPostsContainer />\r\n      </div>\r\n    );\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import {MessagePageType} from \"./store\"\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState: MessagePageType = {\r\n    dialogsData: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Andrey\" },\r\n        { id: 3, name: \"Sveta\" },\r\n        { id: 4, name: \"Sasha\" },\r\n        { id: 5, name: \"Viktor\" },\r\n        { id: 6, name: \"Valery\" },\r\n    ],\r\n    messagesData: [\r\n        { id: 1, text: \"Hi\" },\r\n        { id: 2, text: \"How are you?\" },\r\n        { id: 3, text: \"What are you doing?\" },\r\n        { id: 4, text: \"Hello my friend;)\" },\r\n        { id: 5, text: \"Yo!\" },\r\n        { id: 6, text: \"Goodbye!\" },\r\n    ],\r\n    newMessageText: \"\"\r\n}\r\n\r\nconst MessagesReducer = (state: MessagePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {...state, newMessageText: action.payload.newText}\r\n        }\r\n        case SEND_MESSAGE: {\r\n            let id = state.messagesData.length + 1;\r\n            let newMessage = {id: id, text: state.newMessageText};\r\n            return {...state, messagesData: [...state.messagesData, newMessage], newMessageText: \"\"}\r\n            \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType =  addMessageACType | updateNewMessageTextACType;\r\n\r\nexport type addMessageACType = ReturnType<typeof addMessageAC>\r\nexport const addMessageAC = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n}\r\n\r\n\r\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\r\nexport const updateNewMessageTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        payload: {\r\n            newText: text\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default MessagesReducer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {MessagePageType\r\n} from '../../redux/store';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype DialogsPropsType = {\r\n    addMessage: () => void\r\n    updateNewMessageText: (text: string) => void\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialgs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogItems = props.dialogsPage.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} />);\r\n    let messagesItems = props.dialogsPage.messagesData.map((m) => <Message text={m.text} />);\r\n\r\n\r\n    let messageOnChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewMessageText(text)\r\n    }\r\n\r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n                <div>\r\n                    <div>\r\n                        <textarea onChange={messageOnChange} value={props.dialogsPage.newMessageText} />\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={addMessage}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addMessageAC, updateNewMessageTextAC } from '../../redux/MessagesReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessagePageType } from '../../redux/store';\r\nimport Dialogs from './Dialogs';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    updateNewMessageText: (text: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => { //принимает в параметры state\r\n    return { //для данных из стейта \r\n        dialogsPage: state.messagesPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return { //для коллбэков\r\n        addMessage: () => {dispatch(addMessageAC())},\r\n        updateNewMessageText: (text: string) => {dispatch(updateNewMessageTextAC(text));},\r\n    }\r\n}\r\n\r\nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\"\r\nimport '../../App.css';\r\nimport { SidebarPageType } from '../../redux/store';\r\n\r\ntype NavbarPropsType = {\r\n  state: SidebarPageType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n\r\n  let friendsItems = props.state.friends.map((fr) => {\r\n    return <div className={s.friend}><img src={fr.link} alt=\"img\"/>{fr.name}</div>\r\n  })\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>Settings</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" className={({isActive}) => isActive ? \"active-link\" : \"\"}>Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <div className={s.friends}>Friends</div>\r\n        {friendsItems}\r\n      </div>\r\n    </nav>);\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { SidebarPageType } from '../../redux/store';\r\nimport Navbar from './Navbar';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: SidebarPageType\r\n} \r\n\r\ntype mapDispatchToPropsType = {}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {}\r\n}\r\n\r\nlet NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW =\"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: null,\r\n    photos: {\r\n        small: null | any,\r\n        large: null | any\r\n      },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: UsersPageType = initialState, action: UsersACType) => {\r\n    switch(action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if(u.id === action.payload.id) {\r\n                        let userCopy = {...u, followed: true};\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if(u.id === action.payload.id) {\r\n                        let userCopy = {...u, followed: false};\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...state.users, ...action.payload.users]\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type UsersACType = FollowACType | UnfollowACType | SetUsersACType;\r\n\r\nexport type FollowACType = ReturnType<typeof FollowAC>\r\nexport const FollowAC = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type UnfollowACType = ReturnType<typeof UnfollowAC>\r\nexport const UnfollowAC = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type SetUsersACType = ReturnType<typeof SetUsersAC>\r\nexport const SetUsersAC = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users: users\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default UsersReducer;","export default __webpack_public_path__ + \"static/media/user.02d5ce4f.png\";","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport s from \"./Users.module.css\"\r\nimport userPic from \"../../img/user.png\"\r\nimport { UsersPropsType } from \"./Users\";\r\n\r\nclass UsersClass extends React.Component<UsersPropsType, {}> {\r\n\r\n    constructor(props: UsersPropsType) {\r\n        super(props);\r\n            axios.get(\"https://social-network.samuraijs.com/api/1.0/users\").then(\r\n                response => this.props.setUsers(response.data.items)\r\n            );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.users.map(user => <div key={user.id} className={s.UserCard}>\r\n                        <span className={s.avatarBlock}>\r\n                            <div className={s.Avatar}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPic } alt=\"Avatar\" />\r\n                            </div>\r\n                            <div>\r\n                                {\r\n                                    user.followed ? <button className={s.FollowButton} onClick={() => this.props.unfollow(user.id)}>Unfollow</button> : <button className={s.FollowButton} onClick={() => this.props.follow(user.id)}>Follow</button>\r\n                                }\r\n                            </div>\r\n                        </span>\r\n                        <div className={s.infoBlock}>\r\n                            <span className={s.userInfo}>\r\n                                <div>{user.name}</div>\r\n                                <div>{user.status}</div>\r\n                            </span>\r\n                            <span>\r\n                                <div>{'user.location.country'}</div>\r\n                                <div>{'user.location.city'}</div>\r\n                            </span>\r\n                        </div>\r\n                    </div>)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default UsersClass;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { FollowAC, SetUsersAC, UnfollowAC, UserType } from \"../../redux/UsersReducer\";\r\nimport Users from \"./Users\";\r\nimport UsersClass from \"./UsersClass\";\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        follow: (id: number) => {dispatch(FollowAC(id))},\r\n        unfollow: (id: number) => {dispatch(UnfollowAC(id))},\r\n        setUsers: (users: Array<UserType>) => {dispatch(SetUsersAC(users))}\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\r\nexport const UsersContainer = connect(mapStateToProps, mapDispatchToProps)(UsersClass)","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Profile from './Components/Profile/Profile';\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from './Components/Settings/Settings';\nimport {Route, Routes } from 'react-router-dom'\nimport { StateType} from './redux/store';\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport { UsersContainer } from './Components/Users/UsersContainer';\n\n//оставь надежду всяк сюда входящий\n//* урок 48 закончен\n\ntype AppPropsType = {\n  state?: StateType\n  dispatch?: (action: any) => void\n  store?: any\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n  return (\n      <div className=\"App\">\n        <Header />\n        <NavbarContainer />\n        <div className=\"app-wrapper-content\">\n          <Routes>\n          <Route  path='/dialogs' element={< DialogsContainer />}/>\n          <Route path='/profile' element={<Profile />}/>\n          <Route path='/news' element={<News/>} />\n          <Route path='/music' element={<Music/>} />\n          <Route path='/settings' element={<Settings/>} />\n          <Route path='/users' element={<UsersContainer/>} />\n          </Routes>\n        </div> \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SidebarPageType } from \"./store\"\r\n\r\nlet initialState: SidebarPageType = {\r\n    friends: [\r\n        { id: 1, name: \"Dimych\", link: \"https://cs6.pikabu.ru/avatars/404/x404070-828004264.png\" },\r\n        { id: 2, name: \"Andrey\", link: \"https://aftershock.news/sites/default/files/pictures/picture-42471-1586248390.jpg\" },\r\n        { id: 3, name: \"Sveta\", link: \"https://www.meme-arsenal.com/memes/cdfd31e349e0124972afec8440807b32.jpg\" }\r\n    ]\r\n}\r\n\r\nconst SidebarReducer = (state: SidebarPageType = initialState, action: GeneralACType) => {\r\n\r\n    return state\r\n}\r\n\r\ntype GeneralACType = void;\r\n\r\nexport default SidebarReducer;","import { combineReducers, createStore } from \"redux\";\r\nimport MessagesReducer from \"./MessagesReducer\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport SidebarReducer from \"./SidebarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    sidebar: SidebarReducer,\r\n    usersPage: UsersReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StateType} from './redux/store';\nimport { Provider } from 'react-redux';\n\n\n\nlet rerenderEntireTree = (state: StateType) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__DF114\",\"item\":\"Navbar_item__EPJmQ\",\"active-link\":\"Navbar_active-link__3FqVw\",\"active\":\"Navbar_active__1y0Ce\",\"friend\":\"Navbar_friend__1GKxm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Users_Avatar__Uezqs\",\"FollowButton\":\"Users_FollowButton__3tp_j\",\"UserCard\":\"Users_UserCard__1P3-U\",\"avatarBlock\":\"Users_avatarBlock__aj0Au\",\"userInfo\":\"Users_userInfo__34aiX\",\"infoBlock\":\"Users_infoBlock__1ZxRK\"};"],"sourceRoot":""}