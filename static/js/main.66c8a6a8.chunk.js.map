{"version":3,"sources":["Components/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Login/Login.module.css","Components/Users/Users.module.css","Components/Navbar/Navbar.module.css","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/MessagesReducer.ts","utils/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.tsx","HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Navbar/Navbar.tsx","Components/Navbar/NavbarContainer.tsx","api/api.ts","redux/UsersReducer.ts","img/user.png","Components/Users/UsersAPIComponent.tsx","img/loader2.gif","Components/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","redux/ProfileReducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProdileInfo/ProfileStatus.tsx","Components/Profile/ProdileInfo/ProfileInfo.tsx","Components/Profile/ProfileContainer.tsx","img/logo.png","Components/Header/Header.tsx","redux/AuthReducer.ts","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","App.tsx","reportWebVitals.ts","redux/SidebarReducer.ts","redux/redux-store.tsx","index.tsx","Components/Profile/ProdileInfo/ProfileInfo.module.css","Components/Dialogs/Dialogs.module.css","utils/FormsControls/FormControl.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css"],"names":["module","exports","News","Music","Settings","SEND_MESSAGE","initialState","dialogsData","id","name","messagesData","text","MessagesReducer","state","action","type","length","newMessage","payload","value","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","maxLengthCreator","maxLength","requiredField","DialogItem","path","dialog","to","Message","message","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogItems","dialogsPage","map","d","messagesItems","m","dialogs","dialogs_items","messages","values","addMessage","newMessageBody","mapStateToProps","isAuth","auth","withAuthRedirect","Component","connect","DialogsContainer","compose","messagesPage","dispatch","addMessageAC","Navbar","friendsItems","friends","fr","friend","src","link","alt","nav","item","isActive","NavbarContainer","sidebar","instance","axios","create","baseURL","withCredentials","headers","usersApi","currentPage","pageSize","get","then","response","data","userId","profileApi","status","put","authApi","email","password","rememberMe","post","delete","followApi","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETHING","TOGGLE_FOLLOWING_IN_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","SetUsers","SetTotalUsersCount","totalCount","ToggleIsFetching","ToggleFollowingInProgress","following","UsersReducer","u","followed","filter","UsersAPIComponent","pagesCount","Math","ceil","pages","i","push","PagesContainer","page","onClick","e","onPageChanged","SelectedPage","user","UserCard","avatarBlock","Avatar","photos","small","userPic","infoBlock","userInfo","Status","location","followBox","disabled","some","FollowButton","unfollow","follow","Preloader","Loader","loader2","UsersClass","getUsers","SetCurrentPage","this","React","UsersContainer","usersPage","resultCode","setTimeout","items","ADD_POST","SET_USER_PROFILE","SET_STATUS","postData","likesCount","profile","SetUserStatus","ProfileReducer","newPost","Post","maxLength10","AddPostFormRedux","MyPosts","postsItems","posts","p","PostsContainer","addPost","MyPostsContainer","profilePage","addPostAC","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeHandler","currentTarget","prevProps","prevState","onDoubleClick","autoFocus","onChange","onBlur","ProfileInfo","InfoContainer","ProfilePhoto","descriptionBlock","userFoto","description","Name","fullName","ProfileContainer","match","params","authorizedUserId","toString","getUserProfile","getUserStatus","mainContent","ProfileContainerCompose","withRouter","Header","header","reactLogo","LoginBlock","login","logout","SET_USER_DATA","setUserData","getAuthUserData","AuthReducer","HeaderContainer","LoginForm","formSummaryError","LoginReduxForm","stopSubmit","_error","LoginPage","formData","App","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SidebarReducer","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,OAAS,4B,oBCA3BD,EAAOC,QAAU,CAAC,YAAc,+B,oBCAhCD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,UAAY,yBAAyB,aAAe,4BAA4B,SAAW,wBAAwB,YAAc,2BAA2B,SAAW,wBAAwB,OAAS,sBAAsB,SAAW,wBAAwB,UAAY,yBAAyB,KAAO,oBAAoB,aAAe,4BAA4B,eAAiB,gC,yCCA9aD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,cAAc,4BAA4B,OAAS,yB,mGCU5GC,EARa,WACxB,OACI,wCCMOC,EARc,WACzB,OACI,yCCMOC,EARiB,WAC5B,OACI,4C,qCCHFC,EAAe,cAEjBC,EAAgC,CAChCC,YAAa,CACT,CAAEC,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,WAEnBC,aAAc,CACV,CAAEF,GAAI,EAAGG,KAAM,MACf,CAAEH,GAAI,EAAGG,KAAM,gBACf,CAAEH,GAAI,EAAGG,KAAM,uBACf,CAAEH,GAAI,EAAGG,KAAM,qBACf,CAAEH,GAAI,EAAGG,KAAM,OACf,CAAEH,GAAI,EAAGG,KAAM,cA4BRC,EAxBS,WAAmE,IAAlEC,EAAiE,uDAAxCP,EAAcQ,EAA0B,uCACtF,OAAQA,EAAOC,MACX,KAAKV,EACD,IAAIG,EAAKK,EAAMH,aAAaM,OAAS,EACjCC,EAAa,CAACT,GAAIA,EAAIG,KAAMG,EAAOI,QAAQC,OAC/C,OAAO,2BAAIN,GAAX,IAAkBH,aAAa,GAAD,mBAAMG,EAAMH,cAAZ,CAA0BO,MAG5D,QAAS,OAAOJ,I,oEC5BlBO,EAAc,SAAC,GAA0C,EAAxCC,MAAyC,IAAlCC,EAAiC,EAAjCA,KAAgBC,GAAiB,EAA3BC,MAA2B,yCACvDC,EAAWH,EAAKI,SAAWJ,EAAKK,MAEpC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAWI,IAAEF,MAAQ,IAA5D,UACKJ,EAAMQ,SACP,8BACKN,GAAY,+BAAOH,EAAKK,cAM5BK,EAAW,SAACT,GAAgB,IAC9BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADgB,YACOD,EADP,2BAEpC,OACI,cAAC,EAAD,2BAAiBA,GAAjB,aAAwB,oDAAcF,GAAWY,QAI5CC,EAAQ,SAACX,GAAgB,IAC3BF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MADa,YACUD,EADV,2BAEjC,OACI,cAAC,EAAD,2BAAiBA,GAAjB,aAAwB,iDAAWF,GAAWY,QCpBzCE,EAAmB,SAACC,GAAD,OAAuB,SAACjB,GACpD,GAAGA,GAASA,EAAMH,OAASoB,EACvB,MAAM,iBAAN,OAAwBA,EAAxB,cAKKC,EAAgB,SAAClB,GAC1B,IAAGA,EAGC,MAAO,qBCSTmB,EAAa,SAACf,GAChB,IAAIgB,EAAO,WAAahB,EAAMf,GAC9B,OACI,qBAAKoB,UAAWC,IAAEW,OAAlB,SACI,cAAC,IAAD,CAASC,GAAIF,EAAb,SAAoBhB,EAAMd,UAKhCiC,EAAU,SAACnB,GACb,OACI,qBAAKK,UAAWC,IAAEc,QAAlB,SAA4BpB,EAAMZ,QA4BtCiC,EAAeT,EAAiB,KAe9BU,EAAsBC,YAA0B,CAClDC,KAAM,wBADkBD,EAdwC,SAACvB,GACjE,OACI,uBAAMyB,SAAUzB,EAAM0B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOzC,KAAK,iBAAiB0C,UAAWnB,EAAUoB,YAAY,qBAC9DC,SAAU,CAAChB,EAAeO,OAE9B,8BACI,kDAUDU,EA3C6B,SAAC/B,GACzC,IAAIgC,EAAchC,EAAMiC,YAAYjD,YAAYkD,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYjD,KAAMiD,EAAEjD,KAAMD,GAAIkD,EAAElD,QACvFmD,EAAgBpC,EAAMiC,YAAY9C,aAAa+C,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAASjD,KAAMiD,EAAEjD,UAM/E,OACI,sBAAKiB,UAAWC,IAAEgC,QAAlB,UACI,qBAAKjC,UAAWC,IAAEiC,cAAlB,SACKP,IAEL,sBAAK3B,UAAWC,IAAEkC,SAAlB,UACKJ,EACD,cAACd,EAAD,CAAqBG,SAXb,SAACgB,GACjBzC,EAAM0C,WAAWD,EAAOE,0BCtC1BC,EAAkB,SAACtD,GACrB,MAAO,CACHuD,OAAQvD,EAAMwD,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OADiCC,YAAQL,EAARK,EARP,SAACjD,GAA8B,IAChD6C,EAAwB7C,EAAxB6C,OAAWnC,EADoC,YACvBV,EADuB,YAGpD,OAAI6C,EAEG,cAACG,EAAD,eAAetC,IAFH,cAAC,IAAD,CAAUQ,GAAG,cCAxC,IAgBegC,EALQC,YACnBF,aAZkB,SAAC3D,GACnB,MAAO,CACH2C,YAAa3C,EAAM8D,iBAGF,SAACC,GACtB,MAAO,CACHX,WAAY,SAAC9C,GAAmByD,ELaZ,SAACzD,GACzB,MAAO,CACHJ,KAAMV,EACNa,QAAS,CACLC,UKjBqC0D,CAAa1D,SAM1DmD,EAFmBI,CAGrBpB,G,iBCUawB,EAhC2B,SAACvD,GAEzC,IAAIwD,EAAexD,EAAMV,MAAMmE,QAAQvB,KAAI,SAACwB,GAC1C,OAAO,sBAAKrD,UAAWC,IAAEqD,OAAlB,UAA0B,qBAAKC,IAAKF,EAAGG,KAAMC,IAAI,QAAQJ,EAAGxE,WAGrE,OACE,sBAAKmB,UAAWC,IAAEyD,IAAlB,UACE,qBAAK1D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,mBAAmBb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAAnF,uBAEF,qBAAK5D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,WAAWb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAA3E,wBAEF,qBAAK5D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,QAAQb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAAxE,oBAEF,qBAAK5D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,SAASb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAAzE,qBAEF,qBAAK5D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,YAAYb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAA5E,wBAEF,qBAAK5D,UAAWC,IAAE0D,KAAlB,SACE,cAAC,IAAD,CAAS9C,GAAG,SAASb,UAAW,SAAC4D,GAAD,OAAcA,EAAW,cAAgB,IAAzE,qBAEF,gCACE,qBAAK5D,UAAWC,IAAEmD,QAAlB,qBACCD,SCZMU,EAFOjB,aAVA,SAAC3D,GACnB,MAAO,CACHA,MAAOA,EAAM6E,YAII,SAACd,GACtB,MAAO,KAGWJ,CAA6CM,G,yCCtB7Da,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,+CACRC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAW,SACXC,EAAqBC,GAC1B,OAAOR,EAASS,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAClDE,MAAK,SAAAC,GACF,OAAOA,EAASC,SAJnBN,EAAW,SAOTO,GACP,OAAOb,EAASS,IAAI,WAAaI,IAI5BC,EAAa,SAIZD,GACN,OAAOb,EAASS,IAAI,kBAAoBI,IALnCC,EAAa,SAOTC,GACT,OAAOf,EAASgB,IAAT,iBAA+B,CAACD,OAAQA,KAK1CE,GAAU,WAEf,OAAOjB,EAASS,IAAT,yDAFFQ,GAAU,SAIbC,EAAeC,GAAgD,IAA9BC,EAA6B,wDAChE,OAAOpB,EAASqB,KAAT,aAA4B,CAAEH,QAAOC,WAAUC,gBALjDH,GAAU,WAQf,OAAOjB,EAASsB,OAAT,eAIFC,GAAY,SACdV,GACH,OAAOb,EAASqB,KAAT,kBAAyBR,GAAU,GAAI,KAFzCU,GAAY,SAIZV,GACL,OAAOb,EAASsB,OAAT,kBAA2BT,KChDpCW,GAAS,SACTC,GAAW,WACXC,GAAY,YACZC,GAAmB,mBACnBC,GAAwB,wBACxBC,GAAoB,qBACpBC,GAA+B,+BAuBjCnH,GAA8B,CAC9BoH,MAAO,GACPvB,SAAU,EACVwB,gBAAiB,EACjBzB,YAAa,EACb0B,YAAY,EACZC,oBAAqB,IAqFZC,GAAW,SAACJ,GACrB,MAAO,CACH3G,KAAMsG,GACNnG,QAAS,CACLwG,MAAOA,KAcNK,GAAqB,SAACC,GAC/B,MAAO,CACHjH,KAAMwG,GACNrG,QAAS,CACL8G,gBAKCC,GAAmB,SAACL,GAC7B,MAAO,CACH7G,KAAMyG,GACNtG,QAAS,CACL0G,WAAYA,KAKXM,GAA4B,SAACC,EAAoB3B,GAC1D,MAAO,CACHzF,KAAM0G,GACNvG,QAAS,CACLiH,YACA3B,YA8CG4B,GAxKM,WAA+D,IAA9DvH,EAA6D,uDAAtCP,GAAcQ,EAAwB,uCAC/E,OAAQA,EAAOC,MACX,KAAKoG,GACD,OAAO,2BACAtG,GADP,IAEI6G,MAAO7G,EAAM6G,MAAMjE,KAAI,SAAA4E,GACnB,OAAIA,EAAE7H,KAAOM,EAAOI,QAAQV,GACZ,2BAAQ6H,GAAR,IAAWC,UAAU,IAG9BD,OAInB,KAAKjB,GACD,OAAO,2BACAvG,GADP,IAEI6G,MAAO7G,EAAM6G,MAAMjE,KAAI,SAAA4E,GACnB,OAAIA,EAAE7H,KAAOM,EAAOI,QAAQV,GACZ,2BAAQ6H,GAAR,IAAWC,UAAU,IAG9BD,OAInB,KAAKhB,GACD,OAAO,2BACAxG,GADP,IAEI6G,MAAM,YAAK5G,EAAOI,QAAQwG,SAGlC,KAAKJ,GACD,OAAO,2BACAzG,GADP,IAEIqF,YAAapF,EAAOI,QAAQgF,cAGpC,KAAKqB,GACD,OAAO,2BACA1G,GADP,IAEI8G,gBAAiB7G,EAAOI,QAAQ8G,aAGxC,KAAKR,GACD,OAAO,2BACA3G,GADP,IAEI+G,WAAY9G,EAAOI,QAAQ0G,aAGnC,KAAKH,GACD,OAAO,2BACA5G,GADP,IAEIgH,oBAAqB/G,EAAOI,QAAQiH,UAAf,sBAA+BtH,EAAMgH,qBAArC,CAA0D/G,EAAOI,QAAQsF,SAAzE,YAAuF3F,EAAMgH,oBAAoBU,QAAO,SAAA/H,GAAE,OAAIA,IAAOM,EAAOI,QAAQsF,aAGjL,QAAS,OAAO3F,I,oBCnGT,OAA0B,iCCqE1B2H,GAnDW,SAACjH,GAIvB,IAFA,IAAIkH,EAAaC,KAAKC,KAAKpH,EAAMoG,gBAAkBpG,EAAM4E,UACrDyC,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAIf,OAFAD,EAAM5H,OAAS,GAGX,gCACI,qBAAKY,UAAWC,KAAEkH,eAAlB,SAEQH,EAAMnF,KAAI,SAAAuF,GAAI,OAAI,uBAAMC,QAAS,SAACC,GAAQ3H,EAAM4H,cAAcH,IAASpH,UAAWL,EAAM2E,cAAgB8C,EAAOnH,KAAEuH,aAAevH,KAAEmH,KAAhH,UAAuHA,EAAvH,YAItBzH,EAAMmG,MAAMjE,KAAI,SAAA4F,GAAI,OAAI,sBAAmBzH,UAAWC,KAAEyH,SAAhC,UACpB,sBAAM1H,UAAWC,KAAE0H,YAAnB,SACI,qBAAK3H,UAAWC,KAAE2H,OAAlB,SACI,cAAC,IAAD,CAAS/G,GAAI,YAAc4G,EAAK7I,GAAhC,SACI,qBAAK2E,IAA2B,OAAtBkE,EAAKI,OAAOC,MAAiBL,EAAKI,OAAOC,MAAQC,GAAStE,IAAI,iBAKpF,sBAAKzD,UAAWC,KAAE+H,UAAlB,UACI,uBAAMhI,UAAWC,KAAEgI,SAAnB,UACI,8BAAMR,EAAK5I,OACX,qBAAKmB,UAAWC,KAAEiI,OAAlB,SAA2BT,EAAK3C,YAEpC,uBAAM9E,UAAWC,KAAEkI,SAAnB,UACI,8BAAM,YACN,8BAAM,YAEV,qBAAKnI,UAAWC,KAAEmI,UAAlB,SAEQX,EAAKf,SAAW,wBAAQ2B,SAAU1I,EAAMsG,oBAAoBqC,MAAK,SAAA1J,GAAE,OAAIA,IAAO6I,EAAK7I,MAAKoB,UAAWC,KAAEsI,aAAclB,QAAS,WACxH1H,EAAM6I,SAASf,EAAK7I,KADR,sBAEO,wBAAQyJ,SAAU1I,EAAMsG,oBAAoBqC,MAAK,SAAA1J,GAAE,OAAIA,IAAO6I,EAAK7I,MAAKoB,UAAWC,KAAEsI,aAAclB,QAAS,WAC/H1H,EAAM8I,OAAOhB,EAAK7I,KADC,2BAtBL6I,EAAK7I,WCnCxC,OAA0B,oC,qBCgB1B8J,GARG,SAAC/I,GACf,OACI,8BACI,qBAAKK,UAAWC,KAAE0I,OAAQpF,IAAKqF,GAASnF,IAAI,cCgClDoF,G,4MAOFtB,cAAgB,SAACH,GACb,EAAKzH,MAAMmJ,SAAS1B,EAAM,EAAKzH,MAAM4E,UACrC,EAAK5E,MAAMoJ,eAAe3B,I,uDAP9B,WACI4B,KAAKrJ,MAAMmJ,SAASE,KAAKrJ,MAAM2E,YAAa0E,KAAKrJ,MAAM4E,Y,oBAS3D,WACI,OACI,qCACKyE,KAAKrJ,MAAMqG,WAAa,cAAC,GAAD,IAAe,KACxC,cAAC,GAAD,CACID,gBAAiBiD,KAAKrJ,MAAMoG,gBAC5BxB,SAAUyE,KAAKrJ,MAAM4E,SACrBgD,cAAeyB,KAAKzB,cACpBjD,YAAa0E,KAAKrJ,MAAM2E,YACxBwB,MAAOkD,KAAKrJ,MAAMmG,MAClB2C,OAAQO,KAAKrJ,MAAM8I,OACnBD,SAAUQ,KAAKrJ,MAAM6I,SACrBlC,0BAA2B0C,KAAKrJ,MAAM2G,0BACtCL,oBAAqB+C,KAAKrJ,MAAMsG,6B,GAzB3BgD,IAAMtG,WA2ClBuG,GAAiBtG,aAXR,SAAC3D,GACnB,MAAO,CACH6G,MAAO7G,EAAMkK,UAAUrD,MACvBvB,SAAUtF,EAAMkK,UAAU5E,SAC1BwB,gBAAiB9G,EAAMkK,UAAUpD,gBACjCzB,YAAarF,EAAMkK,UAAU7E,YAC7B0B,WAAY/G,EAAMkK,UAAUnD,WAC5BC,oBAAqBhH,EAAMkK,UAAUlD,uBAIU,CAACwC,OLkGlC,SAAC7D,GACnB,OAAO,SAAC5B,GACJA,EAASsD,IAA0B,EAAM1B,IACzCU,GAAiBV,GAAQH,MAAK,SAAAC,GAEO,IAA7BA,EAASC,KAAKyE,YACdpG,EAnFL,CACH7D,KAAMoG,GACNjG,QAAS,CACLV,GAgFoBgG,KAEpB5B,EAASsD,IAA0B,EAAO1B,SKzGlD4D,SL8GoB,SAAC5D,GACrB,OAAO,SAAC5B,GACJA,EAASsD,IAA0B,EAAM1B,IACzCU,GAAmBV,GAAQH,MAAK,SAAAC,GAEK,IAA7BA,EAASC,KAAKyE,YACdpG,EAvFL,CACH7D,KAAMqG,GACNlG,QAAS,CACLV,GAoFsBgG,KAEtB5B,EAASsD,IAA0B,EAAO1B,SKtHxCsB,YAAU6C,eL8CM,SAACzE,GAC3B,MAAO,CACHnF,KAAMuG,GACNpG,QAAS,CACLgF,iBKlD4B6B,sBACpCE,oBAAkBC,6BAA2BwC,SLkFzB,SAACxE,EAAqBC,GAC1C,OAAO,SAACvB,GACJA,EAASqD,IAAiB,IAC1BhC,EAAkBC,EAAaC,GAAUE,MACrC,SAAAE,GACI0E,YAAW,kBAAMrG,EAASqD,IAAiB,MAAS,KAEpDrD,EAASkD,GAASvB,EAAK2E,QACvBtG,EAASmD,GAAmBxB,EAAKyB,mBK5FnBxD,CAE8BiG,ICnFtDU,GAAW,WACXC,GAAmB,mBACnBC,GAAa,kBAgCf/K,GAAgC,CAChCgL,SAAU,CACN,CAAE9K,GAAI,EAAGmC,QAAS,mBAAoB4I,WAAY,IAClD,CAAE/K,GAAI,EAAGmC,QAAS,qBAAsB4I,WAAY,IACpD,CAAE/K,GAAI,EAAGmC,QAAS,SAAU4I,WAAY,IAE5CC,QAAS,KACT9E,OAAQ,IA2CC+E,GAAgB,SAAC/E,GAC1B,MAAO,CACH3F,KAAMsK,GACNnK,QAAS,CACLwF,OAAQA,KAiCLgF,GA7EQ,WAAmE,IAAlE7K,EAAiE,uDAAxCP,GAAcQ,EAA0B,uCACrF,OAAQA,EAAOC,MACX,KAAKoK,GACD,IAAI3K,EAAKK,EAAMyK,SAAStK,OAAS,EAC7B2K,EAAU,CAAEnL,GAAIA,EAAImC,QAAS7B,EAAOI,QAAQP,KAAM4K,WAAY,GAClE,OAAO,2BAAK1K,GAAZ,IAAmByK,SAAS,GAAD,mBAAMzK,EAAMyK,UAAZ,CAAsBK,MAErD,KAAKP,GACD,OAAO,2BAAKvK,GAAZ,IAAmB2K,QAAS1K,EAAOI,QAAQsK,UAE/C,KAAKH,GAED,OAAO,2BAAIxK,GAAX,IAAkB6F,OAAQ5F,EAAOI,QAAQwF,SAE7C,QAAS,OAAO7F,I,wCC/CT+K,GARuB,SAACrK,GACnC,OACQ,sBAAKK,UAAWC,KAAE0D,KAAlB,UAAwB,qBAAKJ,IAAI,6DAA6DE,IAAI,WAC7F9D,EAAMoB,QACP,uBAAMf,UAAWC,KAAE0J,WAAnB,UAAgChK,EAAMgK,WAAtC,gBC6BVM,GAAc1J,EAAiB,IAejC2J,GAAmBhJ,YAA2B,CAC9CC,KAAM,eADaD,EAbyC,SAACvB,GAC7D,OACI,uBAAMyB,SAAUzB,EAAM0B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOzC,KAAK,OAAO0C,UAAWnB,EAAUqB,SAAU,CAAChB,EAAewJ,QAEtE,8BACI,sDAUDE,GA1C6B,SAACxK,GAEzC,IAAIyK,EAAazK,EAAM0K,MAAMxI,KAAI,SAACyI,GAAD,OAAO,cAAC,GAAD,CAAMvJ,QAASuJ,EAAEvJ,QAAS4I,WAAYW,EAAEX,gBAMhF,OACI,sBAAK3J,UAAWC,KAAEsK,eAAlB,UACI,0CACA,cAACL,GAAD,CAAkB9I,SAPT,SAACgB,GACdzC,EAAM6K,QAAQpI,EAAOgD,SAOjB,qBAAKpF,UAAWC,KAAEoK,MAAlB,SACKD,QCCFK,GAHQ7H,aAZD,SAAC3D,GACnB,MAAO,CACHoL,MAAOpL,EAAMyL,YAAYhB,aAIR,SAAC1G,GACtB,MAAO,CACHwH,QAAS,SAACzL,GAAkBiE,EH6CX,SAACjE,GACtB,MAAO,CACHI,KAAMoK,GACNjK,QAAS,CACLP,SGjDiC4L,CAAU5L,QAIhC6D,CAA6CuH,I,oBCoBrDS,G,4MArCX3L,MAAQ,CACJ4L,UAAU,EACV/F,OAAQ,EAAKnF,MAAMmF,Q,EAEvBgG,iBAAmB,WACf,EAAKC,SAAS,CAACF,UAAU,K,EAE7BG,mBAAqB,WACjB,EAAKD,SAAS,CAACF,UAAU,IACzB,EAAKlL,MAAMsL,iBAAiB,EAAKhM,MAAM6F,S,EAE3CoG,gBAAkB,SAAC5D,GACf,EAAKyD,SAAS,CAACjG,OAAQwC,EAAE6D,cAAc5L,S,wDAE3C,SAAmB6L,EAAmCC,GAC/CD,EAAUtG,SAAWkE,KAAKrJ,MAAMmF,QAC/BkE,KAAK+B,SAAS,CAACjG,OAAQkE,KAAKrJ,MAAMmF,W,oBAG1C,WAAU,IAAD,OACL,OACI,iCACMkE,KAAK/J,MAAM4L,UACT,8BACI,sBAAMS,cAAe,WAAO,EAAKR,oBAAjC,SAAuD9B,KAAKrJ,MAAMmF,QAAU,aAGnFkE,KAAK/J,MAAM4L,UACR,8BACI,uBAAOtL,MAAOyJ,KAAK/J,MAAM6F,OAAQyG,WAAS,EAACC,SAAUxC,KAAKkC,gBAAiBO,OAAQ,WAAO,EAAKT,iC,GA9B3F/B,IAAMtG,WCuBnB+I,GArBoB,SAAC/L,GAEhC,OAAIA,EAAMiK,QAIN,sBAAK5J,UAAWC,KAAE0L,cAAlB,UACI,qBAAK3L,UAAWC,KAAE2L,eAElB,sBAAK5L,UAAWC,KAAE4L,iBAAlB,UACI,qBAAK7L,UAAWC,KAAE2H,OAAlB,SACI,qBAAKrE,IAAK5D,EAAMiK,QAAQ/B,OAAOC,OAASgE,GAAUrI,IAAI,OAE1D,sBAAKzD,UAAWC,KAAE8L,YAAlB,UACI,qBAAK/L,UAAWC,KAAE+L,KAAlB,SAAyBrM,EAAMiK,QAAQqC,WACvC,cAAC,GAAD,CAAenH,OAAQnF,EAAMmF,OAAQmG,iBAAkBtL,EAAMsL,4BAZlE,8BAAK,cAAC,GAAD,O,qBCUdiB,G,uKAEF,WAAqB,IAAD,EAEZtH,EAAM,UAAGoE,KAAKrJ,MAAMwM,aAAd,aAAG,EAAkBC,OAAOxH,OACjCA,GAAqB,YAAXA,IACXA,EAASoE,KAAKrJ,MAAM0M,iBAAiBC,YAEzCtD,KAAKrJ,MAAM4M,eAAe3H,GAC1BoE,KAAKrJ,MAAM6M,cAAc5H,K,oBAI7B,WAEI,OACI,sBAAK5E,UAAWC,KAAEwM,YAAlB,UACI,cAAC,GAAD,CAAa7C,QAASZ,KAAKrJ,MAAMiK,QAAS9E,OAAQkE,KAAKrJ,MAAMmF,OAAQmG,iBAAkBjC,KAAKrJ,MAAMsL,mBAClG,cAAC,GAAD,W,GAlBehC,IAAMtG,WAwCtB+J,GANe5J,YAC1BF,aAVkB,SAAC3D,GACnB,MAAO,CACH2K,QAAS3K,EAAMyL,YAAYd,QAC3B9E,OAAQ7F,EAAMyL,YAAY5F,OAC1BuH,iBAAkBpN,EAAMwD,KAAK7D,GAC7B4D,OAAQvD,EAAMwD,KAAKD,UAKE,CAAE+J,eNqCD,SAAC3H,GAC3B,OAAO,SAAC5B,GAAD,OAAwBqB,EAAoBO,GAClDH,MACG,SAAAC,GArBsB,IAACkF,EAsBvB5G,GAtBuB4G,EAsBClF,EAASC,KArB9B,CACHxF,KAAMqK,GACNlK,QAAS,CACLsK,QAASA,WMvB0B4C,cN6ClB,SAAC5H,GAC1B,OAAO,SAAC5B,GAAD,OAAwB6B,EAAqBD,GACnDH,MAAK,SAAAC,GAEF1B,EAAS6G,GAAcnF,EAASC,YMjDsBsG,iBNuD9B,SAACnG,GAC7B,OAAO,SAAC9B,GAAD,OAAwB6B,EAAwBC,GACtDL,MAAK,SAAAC,GAE8B,IAA7BA,EAASC,KAAKyE,YACbpG,EAAS6G,GAAc/E,WM3D/B6H,IACAjK,EAH0BI,CAI5BoJ,I,oBChEa,OAA0B,iCCsB1BU,GAVe,SAACjN,GAC7B,OAAO,yBAAQK,UAAWC,KAAE4M,OAArB,UACL,qBAAKtJ,IAAKuJ,GAAWrJ,IAAI,SACzB,qBAAKzD,UAAWC,KAAE8M,WAAlB,SACGpN,EAAM6C,OACP,gCAAM7C,EAAMqN,MAAZ,IAAmB,wBAAQ3F,QAAS1H,EAAMsN,OAAvB,uBACnB,cAAC,IAAD,CAASpM,GAAI,SAAb,yB,SCZAqM,GAAgB,gBASlBxO,GAAiC,CACjCE,GAAI,KACJqG,MAAO,KACP+H,MAAO,KACPxK,QAAQ,GAiBC2K,GAAc,SAACvO,EAAmBqG,EAAsB+H,EAAsBxK,GACvF,MAAO,CACHrD,KAAM+N,GACN5N,QAAS,CACLV,KACAqG,QACA+H,QACAxK,YAQC4K,GAAkB,kBAAM,SAACpK,GAE9BgC,KACKP,MAAK,SAAAC,GACF,GAAiC,IAA7BA,EAASC,KAAKyE,WAAkB,CAAC,IAAD,EACL1E,EAASC,KAAKA,KAAnC/F,EAD0B,EAC1BA,GAAIqG,EADsB,EACtBA,MAAO+H,EADe,EACfA,MACjBhK,EAASmK,GAAYvO,EAAIqG,EAAO+H,GAAO,UA8B5CK,GAjEK,WAAoE,IAAnEpO,EAAkE,uDAAxCP,GAAcQ,EAA0B,uCACnF,OAAQA,EAAOC,MACX,KAAK+N,GACD,OAAO,2BACAjO,GACAC,EAAOI,SAGlB,QAAS,OAAOL,ICblBqO,G,uKACF,WACItE,KAAKrJ,MAAMyN,oB,oBAGf,WACI,OAAO,cAAC,GAAD,eAAYpE,KAAKrJ,Y,GANFsJ,IAAMtG,WAiBrBC,gBAPS,SAAC3D,GACrB,MAAO,CACHuD,OAAQvD,EAAMwD,KAAKD,OACnBwK,MAAO/N,EAAMwD,KAAKuK,SAIc,CAACI,mBAAiBH,OD0CpC,WAClB,OAAO,SAACjK,GACJgC,KACKP,MAAK,SAAAC,GAC+B,IAA7BA,EAASC,KAAKyE,YACdpG,EAASmK,GAAY,KAAM,KAAM,MAAM,UC/C5CvK,CAAoD0K,ICApDC,GAtB8C,SAAC5N,GAC1D,OACI,uBAAMyB,SAAUzB,EAAM0B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOE,YAAa,QAAS3C,KAAM,QAAS0C,UAAWjB,EACvDmB,SAAU,CAAChB,OAEf,8BACI,cAACa,EAAA,EAAD,CAAOE,YAAa,WAAY3C,KAAM,WAAY0C,UAAWjB,EAC5DmB,SAAU,CAAChB,GAAgBtB,KAAM,eAEtC,gCACI,cAACmC,EAAA,EAAD,CAAOC,UAAW,QAAS1C,KAAM,aAAcM,KAAM,aADzD,kBAGCQ,EAAMI,OAAS,sBAAKC,UAAWC,IAAEuN,iBAAlB,cAAsC7N,EAAMI,MAA5C,OAChB,8BACI,iD,qBCnBV0N,GAAiBvM,YAAwB,CAC3CC,KAAM,SADaD,CAEpBqM,IAoCY3K,gBAJS,SAAC3D,GAAD,MAA+C,CACnEuD,OAAQvD,EAAMwD,KAAKD,UAGiB,CAACwK,MHgBpB,SAAC/H,EAAeC,EAAkBC,GACnD,OAAO,SAACnC,GACJgC,GAAcC,EAAOC,EAAUC,GAC1BV,MAAK,SAAAC,GACF,GAAiC,IAA7BA,EAASC,KAAKyE,WACdpG,EAASoK,UACN,CACH,IAAIrM,EAAU2D,EAASC,KAAKxC,SAAS/C,OAAS,EAAIsF,EAASC,KAAKxC,SAAS,GAAK,aAC9Ea,EAAS0K,aAAW,QAAS,CAACC,OAAQ5M,YGxB3C6B,EA7BD,SAACjD,GAEX,GAAGA,EAAM6C,OACL,OAAO,cAAC,IAAD,CAAU3B,GAAI,aAOzB,OAAGlB,EAAM6C,OAAe,cAAC,IAAD,CAAU3B,GAAG,aAIjC,sBAAKb,UAAWC,KAAE2N,UAAlB,UACI,uCACA,cAACH,GAAD,CAAgBrM,SAVF,SAACyM,GACnBlO,EAAMqN,MAAMa,EAASb,MAAOa,EAAS3I,SAAU2I,EAAS1I,qBCiBjD2I,GApBqB,SAACnO,GACnC,OACI,sBAAKK,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UAEE,cAAC,IAAD,CAAOW,KAAK,WAAWoN,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,IAAD,CAAOpN,KAAK,oBAAoBoN,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOpN,KAAK,QAAOoN,OAAQ,kBAAM,cAAC,EAAD,OACjC,cAAC,IAAD,CAAOpN,KAAK,SAASoN,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOpN,KAAK,YAAYoN,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOpN,KAAK,SAASoN,OAAQ,kBAAM,cAAC7E,GAAD,OACnC,cAAC,IAAD,CAAOvI,KAAK,SAASoN,OAAQ,kBAAM,cAAC,GAAD,cCrB9BC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBzJ,MAAK,YAAkD,IAA/C0J,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCPVvP,GAAgC,CAChC0E,QAAS,CACL,CAAExE,GAAI,EAAGC,KAAM,SAAU2E,KAAM,2DAC/B,CAAE5E,GAAI,EAAGC,KAAM,SAAU2E,KAAM,qFAC/B,CAAE5E,GAAI,EAAGC,KAAM,QAAS2E,KAAM,6EAWvBgL,GAPQ,WAAmE,IAAlEvP,EAAiE,uDAAxCP,GAE7C,OAAOO,G,oBCHPwP,GAAWC,YAAgB,CAC3BhE,YAAaZ,GACb/G,aAAc/D,EACd8E,QAAS0K,GACTrF,UAAW3C,GACX/D,KAAM4K,GACNlM,KAAMwN,OAMKC,GADHC,YAAYJ,GAAUK,YAAgBC,OCK/BH,GAAMI,WAZvBC,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,GAAD,UAINO,SAASC,eAAe,SAS5BpB,M,mBC7BA5P,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,cAAgB,mCAAmC,aAAe,kCAAkC,OAAS,4BAA4B,YAAc,iCAAiC,KAAO,4B,mBCA1QD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mBCArND,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,mBCAvHD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,eAAiB,kC,mBCAlED,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,2B,mBCAzDD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B","file":"static/js/main.66c8a6a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Preloader_Loader__3O9yV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1v0_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"Login_LoginPage__1tX-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Users_Avatar__Uezqs\",\"followBox\":\"Users_followBox__G_ywg\",\"FollowButton\":\"Users_FollowButton__3tp_j\",\"UserCard\":\"Users_UserCard__1P3-U\",\"avatarBlock\":\"Users_avatarBlock__aj0Au\",\"userInfo\":\"Users_userInfo__34aiX\",\"Status\":\"Users_Status__3Bdku\",\"location\":\"Users_location__1rnO4\",\"infoBlock\":\"Users_infoBlock__1ZxRK\",\"page\":\"Users_page__19XVr\",\"SelectedPage\":\"Users_SelectedPage__oFelf\",\"PagesContainer\":\"Users_PagesContainer__2RkrP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__DF114\",\"item\":\"Navbar_item__EPJmQ\",\"active-link\":\"Navbar_active-link__3FqVw\",\"friend\":\"Navbar_friend__1GKxm\"};","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import {MessagePageType} from \"./store\"\r\n\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState: MessagePageType = {\r\n    dialogsData: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Andrey\" },\r\n        { id: 3, name: \"Sveta\" },\r\n        { id: 4, name: \"Sasha\" },\r\n        { id: 5, name: \"Viktor\" },\r\n        { id: 6, name: \"Valery\" },\r\n    ],\r\n    messagesData: [\r\n        { id: 1, text: \"Hi\" },\r\n        { id: 2, text: \"How are you?\" },\r\n        { id: 3, text: \"What are you doing?\" },\r\n        { id: 4, text: \"Hello my friend;)\" },\r\n        { id: 5, text: \"Yo!\" },\r\n        { id: 6, text: \"Goodbye!\" },\r\n    ]\r\n}\r\n\r\nconst MessagesReducer = (state: MessagePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let id = state.messagesData.length + 1;\r\n            let newMessage = {id: id, text: action.payload.value};\r\n            return {...state, messagesData: [...state.messagesData, newMessage]}\r\n            \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType =  addMessageACType;\r\n\r\nexport type addMessageACType = ReturnType<typeof addMessageAC>\r\nexport const addMessageAC = (value: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        payload: {\r\n            value\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default MessagesReducer;","import React from \"react\";\r\nimport s from \"./FormControl.module.css\"\r\n\r\nconst FormControl = ({ input, meta, child, ...props }: any) => {\r\n    let hasError = meta.touched && meta.error; \r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n            {props.children}\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n    )\r\n}\r\n\r\n","import { AddPostDataType } from \"../../Components/Profile/MyPosts/MyPosts\";\r\n\r\nexport {}\r\ntype GeneralValuesType = AddPostDataType;\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport const requiredField = (value: string) => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n        return \"Field is required\";\r\n}\r\n\r\n","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {\r\n    MessagePageType\r\n} from '../../redux/store';\r\nimport s from './Dialogs.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../utils/FormsControls/FormsControls';\r\nimport { requiredField } from '../../utils/validators/validators';\r\nimport { maxLengthCreator } from './../../utils/validators/validators';\r\n\r\nexport type DialogsPropsType = {\r\n    addMessage: (value: string) => void\r\n    updateNewMessageText: (text: string) => void\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialgs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogItems = props.dialogsPage.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} />);\r\n    let messagesItems = props.dialogsPage.messagesData.map((m) => <Message text={m.text} />);\r\n\r\n    let addNewMessage = (values: AddMessageType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype AddMessageType = {\r\n    newMessageBody: string\r\n}\r\nlet maxLength100 = maxLengthCreator(100);\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' component={Textarea} placeholder=\"Enter your message\" \r\n                validate={[requiredField, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { Component, ComponentType } from \"react\"\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if(!isAuth) return <Redirect to=\"/login\"/>\r\n        \r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n    return ConnectedRedirectComponent;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { addMessageAC} from '../../redux/MessagesReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessagePageType } from '../../redux/store';\r\nimport Dialogs, { DialogsPropsType } from './Dialogs';\r\nimport { withAuthRedirect } from './../../HOC/WithAuthRedirect';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => { //принимает в параметры state\r\n    return { //для данных из стейта \r\n        dialogsPage: state.messagesPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return { //для коллбэков\r\n        addMessage: (value: string) => {dispatch(addMessageAC(value))}\r\n    }\r\n}\r\n\r\nlet DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\"\r\nimport '../../App.css';\r\nimport { SidebarPageType } from '../../redux/store';\r\n\r\ntype NavbarPropsType = {\r\n  state: SidebarPageType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n\r\n  let friendsItems = props.state.friends.map((fr) => {\r\n    return <div className={s.friend}><img src={fr.link} alt=\"img\"/>{fr.name}</div>\r\n  })\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile/:userId\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" className={(isActive) => isActive ? \"active-link\" : \"\"}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Settings</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <div className={s.friends}>Friends</div>\r\n        {friendsItems}\r\n      </div>\r\n    </nav>);\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { SidebarPageType } from '../../redux/store';\r\nimport Navbar from './Navbar';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: SidebarPageType\r\n} \r\n\r\ntype mapDispatchToPropsType = {}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {}\r\n}\r\n\r\nlet NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c4deeac1-451b-4ef8-8dc8-a4ffeee3c9cc'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get(`https://social-network.samuraijs.com/api/1.0/auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const followApi = {\r\n    follow(userId: number) {\r\n        return instance.post(`/follow/${userId}`, {}, {})\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`/follow/${userId}`)\r\n    }\r\n}\r\n\r\n","import { Dispatch } from \"redux\"\r\nimport { followApi, usersApi } from \"../api/api\"\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = \"TOGGLE-FOLLOWING-IN-PROGRESS\"\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: null,\r\n    photos: {\r\n        small: null | any,\r\n        large: null | any\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: UsersPageType = initialState, action: UsersACType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.payload.id) {\r\n                        let userCopy = { ...u, followed: true };\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.payload.id) {\r\n                        let userCopy = { ...u, followed: false };\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.payload.users]\r\n            };\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.payload.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.payload.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.following ? [...state.followingInProgress, action.payload.userId] : [...state.followingInProgress.filter(id => id !== action.payload.userId)]\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type UsersACType = FollowACType | UnfollowACType | SetUsersACType | SetCurrentPageACType | SetTotalUsersCountACType | ToggleIsFetchingACType | ToggleFollowingInProgressACType;\r\n\r\nexport type FollowACType = ReturnType<typeof Follow>\r\nexport const Follow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type UnfollowACType = ReturnType<typeof Unfollow>\r\nexport const Unfollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type SetUsersACType = ReturnType<typeof SetUsers>\r\nexport const SetUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users: users\r\n        }\r\n    } as const\r\n}\r\nexport type SetCurrentPageACType = ReturnType<typeof SetCurrentPage>\r\nexport const SetCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport type SetTotalUsersCountACType = ReturnType<typeof SetTotalUsersCount>\r\nexport const SetTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleIsFetchingACType = ReturnType<typeof ToggleIsFetching>\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETHING,\r\n        payload: {\r\n            isFetching: isFetching\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleFollowingInProgressACType = ReturnType<typeof ToggleFollowingInProgress>\r\nexport const ToggleFollowingInProgress = (following: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n        payload: {\r\n            following,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleIsFetching(true));\r\n        usersApi.getUsers(currentPage, pageSize).then(\r\n            data => {\r\n                setTimeout(() => dispatch(ToggleIsFetching(false)), 200)\r\n                // this.props.toggleIsFetching(false)\r\n                dispatch(SetUsers(data.items));\r\n                dispatch(SetTotalUsersCount(data.totalCount));\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleFollowingInProgress(true, userId))\r\n        followApi.follow(userId).then(response => {\r\n            debugger\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(Follow(userId));\r\n            }\r\n            dispatch(ToggleFollowingInProgress(false, userId));\r\n        })\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(ToggleFollowingInProgress(true, userId))\r\n        followApi.unfollow(userId).then(response => {\r\n            debugger\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(Unfollow(userId));\r\n            }\r\n            dispatch(ToggleFollowingInProgress(false, userId));\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default UsersReducer;","export default __webpack_public_path__ + \"static/media/user.02d5ce4f.png\";","import React from \"react\";\r\nimport { UserType } from \"../../redux/UsersReducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPic from \"../../img/user.png\"\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type UsersAPIPropsType = {\r\n    users: Array<UserType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst UsersAPIComponent = (props: UsersAPIPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    pages.length = 20\r\n    //console.log(props.totalUsersCount);\r\n    return (\r\n        <div>\r\n            <div className={s.PagesContainer}>\r\n                {\r\n                    pages.map(page => <span onClick={(e) => { props.onPageChanged(page) }} className={props.currentPage === page ? s.SelectedPage : s.page}>{page} </span>)\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(user => <div key={user.id} className={s.UserCard}>\r\n                    <span className={s.avatarBlock}>\r\n                        <div className={s.Avatar}>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPic} alt=\"Avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </span>\r\n                    <div className={s.infoBlock}>\r\n                        <span className={s.userInfo}>\r\n                            <div>{user.name}</div>\r\n                            <div className={s.Status}>{user.status}</div>\r\n                        </span>\r\n                        <span className={s.location}>\r\n                            <div>{'Country'}</div>\r\n                            <div>{'City'}</div>\r\n                        </span>\r\n                        <div className={s.followBox}>\r\n                            {\r\n                                user.followed ? <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    props.unfollow(user.id)\r\n                                }}>Unfollow</button> : <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    props.follow(user.id)\r\n                                }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersAPIComponent;","export default __webpack_public_path__ + \"static/media/loader2.f396a593.gif\";","import React from \"react\";\r\nimport loader2 from \"../../img/loader2.gif\"\r\nimport s from \"./Preloader.module.css\"\r\n\r\ntype PreloaderPropsType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderPropsType) => {\r\n    return(\r\n        <div>\r\n            <img className={s.Loader} src={loader2} alt=\"loader\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { follow, getUsers, SetCurrentPage, SetTotalUsersCount, SetUsers, ToggleIsFetching, unfollow, UserType } from \"../../redux/UsersReducer\";\r\nimport UsersAPIComponent from \"./UsersAPIComponent\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport { ToggleFollowingInProgress } from './../../redux/UsersReducer';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\n// type mapDispatchToPropsType = {\r\n//     follow: (id: number) => void\r\n//     unfollow: (id: number) => void\r\n//     setUsers: (users: Array<UserType>) => void\r\n//     setCurrentPage: (currentPage: number) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     toggleIsFetching: (isFetching: boolean) => void\r\n// }\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    isFetching: boolean\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    SetUsers: (users: Array<UserType>) => void\r\n    SetCurrentPage: (currentPage: number) => void\r\n    SetTotalUsersCount: (totalCount: number) => void\r\n    ToggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: number[]\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n}\r\n\r\nclass UsersClass extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize); \r\n        //*передаем параметры для thunk-creator \r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize); \r\n        this.props.SetCurrentPage(page);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <UsersAPIComponent\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    onPageChanged={this.onPageChanged}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow} \r\n                    ToggleFollowingInProgress={this.props.ToggleFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {follow, \r\n    unfollow, SetUsers, SetCurrentPage, SetTotalUsersCount, \r\n    ToggleIsFetching, ToggleFollowingInProgress, getUsers})(UsersClass);","import { Dispatch } from \"redux\";\r\nimport { profileApi, usersApi } from \"../api/api\";\r\nimport { PostType } from \"./store\";\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-USER-STATUS\";\r\n\r\ntype ContactsType = {\r\n    facebook: string | null;\r\n    website: string | null;\r\n    vk: string | null;\r\n    twitter: string | null;\r\n    instagram: string | null;\r\n    youtube: string | null;\r\n    github: string | null;\r\n    mainLink: string | null;\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype ProfilePageType = {\r\n    postData: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    postData: [\r\n        { id: 1, message: \"hi, how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"it is my firt post\", likesCount: 15 },\r\n        { id: 2, message: \"aaaaaa\", likesCount: 1 }\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let id = state.postData.length + 1;\r\n            let newPost = { id: id, message: action.payload.text, likesCount: 0 };\r\n            return { ...state, postData: [...state.postData, newPost]};\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.payload.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            debugger\r\n            return {...state, status: action.payload.status}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType = addPostACType | SetUserProfileACType | SetUserStatusACType;\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (text: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: {\r\n            text\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetUserProfileACType = ReturnType<typeof SetUserProfile>\r\nexport const SetUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {\r\n            profile: profile\r\n        }\r\n    } as const\r\n}\r\nexport type SetUserStatusACType = ReturnType<typeof SetUserStatus>\r\nexport const SetUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        payload: {\r\n            status: status\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return (dispatch: Dispatch) => usersApi.getProfile(userId)\r\n    .then(\r\n        response => {\r\n        dispatch(SetUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return (dispatch: Dispatch) => profileApi.getStatus(userId)\r\n    .then(response =>{\r\n        debugger\r\n        dispatch(SetUserStatus(response.data))\r\n    })\r\n        \r\n        \r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => profileApi.updateStatus(status)\r\n    .then(response => {\r\n        debugger\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(SetUserStatus(status))\r\n        }\r\n    })\r\n}\r\n\r\nexport default ProfileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n            <div className={s.item}><img src=\"https://cs13.pikabu.ru/avatars/2487/x2487329-146029786.png\" alt=\"avatar\"></img>\r\n                {props.message}  \r\n                <span className={s.likesCount}>{props.likesCount} likes</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { requiredField, maxLengthCreator } from './../../../utils/validators/validators';\r\nimport { Textarea } from '../../../utils/FormsControls/FormsControls';\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let postsItems = props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let addNewPost = (values: AddPostDataType) => {\r\n        props.addPost(values.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.PostsContainer}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type AddPostDataType = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddPostForm: React.FC<InjectedFormProps<AddPostDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='post' component={Textarea} validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddPostFormRedux = reduxForm<AddPostDataType>({\r\n    form: \"addPostForm\"\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addPostAC } from '../../../redux/ProfileReducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../redux/store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (text: string) => {dispatch(addPostAC(text))}\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React, { ChangeEvent } from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\n\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (userId: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusPropsType> {\r\n    state = { \r\n        editMode: false, \r\n        status: this.props.status\r\n    };\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true});\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false});\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n    componentDidUpdate(prevProps: ProfileStatusPropsType, prevState: {editMode: boolean, status: string}) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={() => {this.activateEditMode()}}>{this.props.status || \"status\"}</span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input value={this.state.status} autoFocus onChange={this.onChangeHandler} onBlur={() => {this.deactivateEditMode()}}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default ProfileStatus;","import React from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatus from './ProfileStatus';\r\nimport userFoto from \"../../../img/user.png\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    updateUserStatus: (userId: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<any> = (props: ProfileInfoPropsType) => {\r\n    debugger\r\n    if(!props.profile) {\r\n        return <div><Preloader/></div>\r\n    }\r\n    return (\r\n        <div className={s.InfoContainer}>\r\n            <div className={s.ProfilePhoto}>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.Avatar}>\r\n                    <img src={props.profile.photos.small || userFoto} alt=\"\" />\r\n                </div>\r\n                <div className={s.description}>\r\n                    <div className={s.Name}>{props.profile.fullName}</div>\r\n                    <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\nimport { getUserStatus, ProfileType, updateUserStatus} from \"../../redux/ProfileReducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProdileInfo/ProfileInfo\";\r\nimport s from \"./Profile.module.css\";\r\nimport { usersApi } from './../../api/api';\r\nimport { getUserProfile } from './../../redux/ProfileReducer';\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType = {\r\n    profile: ProfileType | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (userId: string) => void\r\n    match: any\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        let userId = this.props.match?.params.userId;\r\n        if (!userId || userId === \":userId\") {\r\n            userId = this.props.authorizedUserId.toString();\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className={s.mainContent}>\r\n                <ProfileInfo profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n                <MyPostsContainer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet ProfileContainerCompose = compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\nexport default ProfileContainerCompose;","export default __webpack_public_path__ + \"static/media/logo.5f0a2246.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\";\r\nimport reactLogo from '../../img/logo.png'\r\n\r\ntype HeaderPropsType = {\r\n  setUserData: (id: number | null, email: string | null, login: string | null) => void\r\n  logout: () => void\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nconst Header: React.FC<any> = (props: HeaderPropsType) => {\r\n  return <header className={s.header}>\r\n    <img src={reactLogo} alt=\"logo\" />\r\n    <div className={s.LoginBlock}>\r\n      {props.isAuth ? \r\n      <div>{props.login} <button onClick={props.logout}>Logout</button></div> : \r\n      <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n  </header>\r\n}\r\nexport default Header;","import { Dispatch } from \"redux\"\r\nimport { stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { authApi } from \"../api/api\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\"\r\n\r\ntype initialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst AuthReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setUserDataACType | stopSubmitType;\r\ntype stopSubmitType = ReturnType<typeof stopSubmit>\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setUserDataACType = ReturnType<typeof setUserData>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, GeneralACType>;\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    debugger\r\n        authApi.getMe()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let { id, email, login } = response.data.data;\r\n                    dispatch(setUserData(id, email, login, true));\r\n                }\r\n            })\r\n    }\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n    return (dispatch) => {\r\n        authApi.login(email, password, rememberMe)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", {_error: message}));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authApi.logout()\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserData(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default AuthReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAuthUserData, logout } from './../../redux/AuthReducer';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype HeaderContainerPropsType = {\r\n    getAuthUserData: () => void\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getAuthUserData, logout})(HeaderContainer);","import React from \"react\";\r\nimport { Field, InjectedFormProps } from \"redux-form\";\r\nimport { Input } from \"../../utils/FormsControls/FormsControls\";\r\nimport { requiredField } from \"../../utils/validators/validators\";\r\nimport s from \"../../utils/FormsControls/FormControl.module.css\"\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Login\"} name={\"login\"} component={Input} \r\n                validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input} \r\n                 validate={[requiredField]} type={\"password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field component={\"input\"} name={\"rememberMe\"} type={\"checkbox\"} /> Remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}> {props.error} </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport LoginForm, { FormDataType } from \"./LoginForm\";\r\nimport s from './Login.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { login} from './../../redux/AuthReducer';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    debugger\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    let onSubmitHandler = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to=\"/profile\" />\r\n    \r\n\r\n    return (\r\n        <div className={s.LoginPage}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmitHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport './App.css';\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from './Components/Settings/Settings';\nimport {Route} from 'react-router-dom'\nimport { StateType} from './redux/store';\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport { UsersContainer } from './Components/Users/UsersContainer';\nimport ProfileContainer from './Components/Profile/ProfileContainer';\nimport HeaderContainer from './Components/Header/HeaderContainer';\nimport Login from './Components/Login/Login';\n\n//* урок 77 закончен\n\ntype AppPropsType = {\n  state?: StateType\n  dispatch?: (action: any) => void\n  store?: any\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n  return (\n      <div className=\"App\">\n        <HeaderContainer/>\n        <NavbarContainer />\n        <div className=\"app-wrapper-content\">\n          \n          <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n          <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n          <Route path='/news'render={() => <News/>}/>\n          <Route path='/music' render={() => <Music/>}/>\n          <Route path='/settings' render={() => <Settings/>} />\n          <Route path='/users' render={() => <UsersContainer/>} />\n          <Route path='/login' render={() => <Login/>} />\n        \n        </div> \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SidebarPageType } from \"./store\"\r\n\r\nlet initialState: SidebarPageType = {\r\n    friends: [\r\n        { id: 1, name: \"Dimych\", link: \"https://cs6.pikabu.ru/avatars/404/x404070-828004264.png\" },\r\n        { id: 2, name: \"Andrey\", link: \"https://aftershock.news/sites/default/files/pictures/picture-42471-1586248390.jpg\" },\r\n        { id: 3, name: \"Sveta\", link: \"https://www.meme-arsenal.com/memes/cdfd31e349e0124972afec8440807b32.jpg\" }\r\n    ]\r\n}\r\n\r\nconst SidebarReducer = (state: SidebarPageType = initialState, action: GeneralACType) => {\r\n\r\n    return state\r\n}\r\n\r\ntype GeneralACType = void;\r\n\r\nexport default SidebarReducer;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport MessagesReducer from \"./MessagesReducer\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport SidebarReducer from \"./SidebarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    sidebar: SidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StateType} from './redux/store';\nimport { Provider } from 'react-redux';\n\n\n\nlet rerenderEntireTree = (state: StateType) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1v9W_\",\"InfoContainer\":\"ProfileInfo_InfoContainer__3yQRD\",\"ProfilePhoto\":\"ProfileInfo_ProfilePhoto__227Ns\",\"Avatar\":\"ProfileInfo_Avatar__FpOi8\",\"description\":\"ProfileInfo_description__1rKpA\",\"Name\":\"ProfileInfo_Name__3Mhn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2R6vH\",\"dialogs_items\":\"Dialogs_dialogs_items__Ckxz2\",\"active\":\"Dialogs_active__oDa8w\",\"dialog\":\"Dialogs_dialog__25TZP\",\"messages\":\"Dialogs_messages__2x5Gv\",\"message\":\"Dialogs_message__LRm7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1ZzNG\",\"error\":\"FormControl_error__3dUKT\",\"formSummaryError\":\"FormControl_formSummaryError__ucq0Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2q_8H\",\"PostsContainer\":\"MyPosts_PostsContainer__1b_Xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ZUrT\",\"likesCount\":\"Post_likesCount__3XH3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3X5wX\",\"LoginBlock\":\"Header_LoginBlock__1lnVl\"};"],"sourceRoot":""}