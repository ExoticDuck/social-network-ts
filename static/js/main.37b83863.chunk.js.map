{"version":3,"sources":["Components/Navbar/Navbar.module.css","Components/Profile/ProdileInfo/ProfileInfo.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css","Components/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Users/Users.module.css","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","redux/MessagesReducer.ts","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Navbar/Navbar.tsx","Components/Navbar/NavbarContainer.tsx","redux/UsersReducer.ts","img/user.png","api/api.ts","Components/Users/UsersAPIComponent.tsx","img/loader2.gif","Components/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","redux/ProfileReducer.ts","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProdileInfo/ProfileInfo.tsx","Components/Profile/ProfileContainer.tsx","img/logo.png","Components/Header/Header.tsx","redux/AuthReducer.ts","Components/Header/HeaderContainer.tsx","App.tsx","reportWebVitals.ts","redux/SidebarReducer.ts","redux/redux-store.tsx","index.tsx"],"names":["module","exports","News","Music","Settings","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","initialState","dialogsData","id","name","messagesData","text","newMessageText","MessagesReducer","state","action","type","payload","newText","length","newMessage","DialogItem","props","path","className","s","dialog","to","Message","message","Dialogs","dialogItems","dialogsPage","map","d","messagesItems","m","dialogs","dialogs_items","messages","onChange","e","currentTarget","value","updateNewMessageText","onClick","addMessage","DialogsContainer","connect","messagesPage","dispatch","updateNewMessageTextAC","Navbar","friendsItems","friends","fr","friend","src","link","alt","nav","item","isActive","NavbarContainer","sidebar","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETHING","TOGGLE_FOLLOWING_IN_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","UsersReducer","u","followed","totalCount","following","userId","filter","instance","axios","create","baseURL","withCredentials","headers","usersApi","get","then","response","data","followApi","post","delete","UsersAPIComponent","pagesCount","Math","ceil","pages","i","push","PagesContainer","page","onPageChanged","SelectedPage","user","UserCard","avatarBlock","Avatar","photos","small","userPic","infoBlock","userInfo","Status","status","location","followBox","disabled","some","FollowButton","ToggleFollowingInProgress","resultCode","unfollow","follow","Preloader","Loader","loader2","UsersClass","SetCurrentPage","ToggleIsFetching","setTimeout","SetUsers","items","this","SetTotalUsersCount","Follow","Unfollow","React","Component","UsersContainer","usersPage","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","postData","likesCount","newPostText","profile","ProfileReducer","newPost","Post","MyPosts","postsItems","posts","p","PostsContainer","updateNewPostText","addPost","MyPostsContainer","profilePage","updateNewPostTextAC","ProfileInfo","InfoContainer","ProfilePhoto","descriptionBlock","description","Name","fullName","About","aboutMe","ProfileContainer","match","params","SetUserProfile","mainContent","WithURLContainer","withRouter","Header","header","reactLogo","LoginBlock","isAuth","login","SET_USER_DATA","email","AuthReducer","HeaderContainer","setUserData","auth","App","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","SidebarReducer","reducers","combineReducers","store","createStore","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37b83863.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__DF114\",\"item\":\"Navbar_item__EPJmQ\",\"active-link\":\"Navbar_active-link__3FqVw\",\"friend\":\"Navbar_friend__1GKxm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1v9W_\",\"InfoContainer\":\"ProfileInfo_InfoContainer__3yQRD\",\"ProfilePhoto\":\"ProfileInfo_ProfilePhoto__227Ns\",\"Avatar\":\"ProfileInfo_Avatar__FpOi8\",\"description\":\"ProfileInfo_description__1rKpA\",\"Name\":\"ProfileInfo_Name__3Mhn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2R6vH\",\"dialogs_items\":\"Dialogs_dialogs_items__Ckxz2\",\"active\":\"Dialogs_active__oDa8w\",\"dialog\":\"Dialogs_dialog__25TZP\",\"messages\":\"Dialogs_messages__2x5Gv\",\"message\":\"Dialogs_message__LRm7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2q_8H\",\"PostsContainer\":\"MyPosts_PostsContainer__1b_Xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ZUrT\",\"likesCount\":\"Post_likesCount__3XH3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3X5wX\",\"LoginBlock\":\"Header_LoginBlock__1lnVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Preloader_Loader__3O9yV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1v0_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"Users_Avatar__Uezqs\",\"followBox\":\"Users_followBox__G_ywg\",\"FollowButton\":\"Users_FollowButton__3tp_j\",\"UserCard\":\"Users_UserCard__1P3-U\",\"avatarBlock\":\"Users_avatarBlock__aj0Au\",\"userInfo\":\"Users_userInfo__34aiX\",\"Status\":\"Users_Status__3Bdku\",\"location\":\"Users_location__1rnO4\",\"infoBlock\":\"Users_infoBlock__1ZxRK\",\"page\":\"Users_page__19XVr\",\"SelectedPage\":\"Users_SelectedPage__oFelf\",\"PagesContainer\":\"Users_PagesContainer__2RkrP\"};","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import {MessagePageType} from \"./store\"\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = \"UPDATE-NEW-MESSAGE-TEXT\";\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState: MessagePageType = {\r\n    dialogsData: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Andrey\" },\r\n        { id: 3, name: \"Sveta\" },\r\n        { id: 4, name: \"Sasha\" },\r\n        { id: 5, name: \"Viktor\" },\r\n        { id: 6, name: \"Valery\" },\r\n    ],\r\n    messagesData: [\r\n        { id: 1, text: \"Hi\" },\r\n        { id: 2, text: \"How are you?\" },\r\n        { id: 3, text: \"What are you doing?\" },\r\n        { id: 4, text: \"Hello my friend;)\" },\r\n        { id: 5, text: \"Yo!\" },\r\n        { id: 6, text: \"Goodbye!\" },\r\n    ],\r\n    newMessageText: \"\"\r\n}\r\n\r\nconst MessagesReducer = (state: MessagePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_TEXT: {\r\n            return {...state, newMessageText: action.payload.newText}\r\n        }\r\n        case SEND_MESSAGE: {\r\n            let id = state.messagesData.length + 1;\r\n            let newMessage = {id: id, text: state.newMessageText};\r\n            return {...state, messagesData: [...state.messagesData, newMessage], newMessageText: \"\"}\r\n            \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType =  addMessageACType | updateNewMessageTextACType;\r\n\r\nexport type addMessageACType = ReturnType<typeof addMessageAC>\r\nexport const addMessageAC = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n}\r\n\r\n\r\nexport type updateNewMessageTextACType = ReturnType<typeof updateNewMessageTextAC>\r\nexport const updateNewMessageTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        payload: {\r\n            newText: text\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default MessagesReducer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {MessagePageType\r\n} from '../../redux/store';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype DialogsPropsType = {\r\n    addMessage: () => void\r\n    updateNewMessageText: (text: string) => void\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialgs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogItems = props.dialogsPage.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} />);\r\n    let messagesItems = props.dialogsPage.messagesData.map((m) => <Message text={m.text} />);\r\n\r\n\r\n    let messageOnChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewMessageText(text)\r\n    }\r\n\r\n    let addMessage = () => {\r\n        props.addMessage()\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n                <div>\r\n                    <div>\r\n                        <textarea onChange={messageOnChange} value={props.dialogsPage.newMessageText} />\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={addMessage}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addMessageAC, updateNewMessageTextAC } from '../../redux/MessagesReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessagePageType } from '../../redux/store';\r\nimport Dialogs from './Dialogs';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: () => void\r\n    updateNewMessageText: (text: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => { //принимает в параметры state\r\n    return { //для данных из стейта \r\n        dialogsPage: state.messagesPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return { //для коллбэков\r\n        addMessage: () => {dispatch(addMessageAC())},\r\n        updateNewMessageText: (text: string) => {dispatch(updateNewMessageTextAC(text));},\r\n    }\r\n}\r\n\r\nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\"\r\nimport '../../App.css';\r\nimport { SidebarPageType } from '../../redux/store';\r\n\r\ntype NavbarPropsType = {\r\n  state: SidebarPageType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n\r\n  let friendsItems = props.state.friends.map((fr) => {\r\n    return <div className={s.friend}><img src={fr.link} alt=\"img\"/>{fr.name}</div>\r\n  })\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile/:userId\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" className={(isActive) => isActive ? \"active-link\" : \"\"}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Settings</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <div className={s.friends}>Friends</div>\r\n        {friendsItems}\r\n      </div>\r\n    </nav>);\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { SidebarPageType } from '../../redux/store';\r\nimport Navbar from './Navbar';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: SidebarPageType\r\n} \r\n\r\ntype mapDispatchToPropsType = {}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {}\r\n}\r\n\r\nlet NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW =\"UNFOLLOW\"\r\nconst SET_USERS = \"SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = \"TOGGLE-FOLLOWING-IN-PROGRESS\"\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>, \r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: null,\r\n    photos: {\r\n        small: null | any,\r\n        large: null | any\r\n      },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [], \r\n    pageSize: 5,\r\n    totalUsersCount: 0, \r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: UsersPageType = initialState, action: UsersACType) => {\r\n    switch(action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if(u.id === action.payload.id) {\r\n                        let userCopy = {...u, followed: true};\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if(u.id === action.payload.id) {\r\n                        let userCopy = {...u, followed: false};\r\n                        return userCopy;\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.payload.users]\r\n            };\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state, \r\n                currentPage: action.payload.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.payload.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETHING: {\r\n            return {\r\n                ...state, \r\n                isFetching: action.payload.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state, \r\n                followingInProgress: action.payload.following ? [...state.followingInProgress, action.payload.userId] : [...state.followingInProgress.filter(id => id !== action.payload.userId)] \r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type UsersACType = FollowACType | UnfollowACType | SetUsersACType | SetCurrentPageACType | SetTotalUsersCountACType | ToggleIsFetchingACType | ToggleFollowingInProgressACType;\r\n\r\nexport type FollowACType = ReturnType<typeof Follow>\r\nexport const Follow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type UnfollowACType = ReturnType<typeof Unfollow>\r\nexport const Unfollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type SetUsersACType = ReturnType<typeof SetUsers>\r\nexport const SetUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users: users\r\n        }\r\n    } as const\r\n}\r\nexport type SetCurrentPageACType = ReturnType<typeof SetCurrentPage>\r\nexport const SetCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport type SetTotalUsersCountACType = ReturnType<typeof SetTotalUsersCount>\r\nexport const SetTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleIsFetchingACType = ReturnType<typeof ToggleIsFetching>\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETHING,\r\n        payload: {\r\n            isFetching: isFetching\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleFollowingInProgressACType = ReturnType<typeof ToggleFollowingInProgress>\r\nexport const ToggleFollowingInProgress = (following: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n        payload: {\r\n            following,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default UsersReducer;","export default __webpack_public_path__ + \"static/media/user.02d5ce4f.png\";","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c4deeac1-451b-4ef8-8dc8-a4ffeee3c9cc'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    }\r\n}\r\n\r\nexport const followApi = {\r\n    follow(userId: number) {\r\n        return instance.post(`/follow/${userId}`, {}, {})\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`/follow/${userId}`)\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport { UserType } from \"../../redux/UsersReducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPic from \"../../img/user.png\"\r\nimport { NavLink } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport { followApi } from \"../../api/api\";\r\n\r\nexport type UsersAPIPropsType = {\r\n    users: Array<UserType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst UsersAPIComponent = (props: UsersAPIPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    pages.length = 10\r\n    //console.log(props.totalUsersCount);\r\n    return (\r\n        <div>\r\n            <div className={s.PagesContainer}>\r\n                {\r\n                    pages.map(page => <span onClick={(e) => { props.onPageChanged(page) }} className={props.currentPage === page ? s.SelectedPage : s.page}>{page} </span>)\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(user => <div key={user.id} className={s.UserCard}>\r\n                    <span className={s.avatarBlock}>\r\n                        <div className={s.Avatar}>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPic} alt=\"Avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </span>\r\n                    <div className={s.infoBlock}>\r\n                        <span className={s.userInfo}>\r\n                            <div>{user.name}</div>\r\n                            <div className={s.Status}>{user.status}</div>\r\n                        </span>\r\n                        <span className={s.location}>\r\n                            <div>{'Country'}</div>\r\n                            <div>{'City'}</div>\r\n                        </span>\r\n                        <div className={s.followBox}>\r\n                            {\r\n                                user.followed ? <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    props.ToggleFollowingInProgress(true, user.id)\r\n                                    followApi.unfollow(user.id).then(response => {\r\n                                        debugger\r\n                                        if(response.data.resultCode === 0) {\r\n                                            props.unfollow(user.id)\r\n                                        }\r\n                                        props.ToggleFollowingInProgress(false, user.id);\r\n                                    })\r\n                                    }}>Unfollow</button> : <button disabled={props.followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                        props.ToggleFollowingInProgress(true, user.id)\r\n                                        followApi.follow(user.id).then(response => {\r\n                                            debugger\r\n                                            if(response.data.resultCode === 0) {\r\n                                                props.follow(user.id)\r\n                                            }\r\n                                            props.ToggleFollowingInProgress(false, user.id);\r\n                                        })\r\n                                    }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersAPIComponent;","export default __webpack_public_path__ + \"static/media/loader2.f396a593.gif\";","import React from \"react\";\r\nimport loader2 from \"../../img/loader2.gif\"\r\nimport s from \"./Preloader.module.css\"\r\n\r\ntype PreloaderPropsType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderPropsType) => {\r\n    return(\r\n        <div>\r\n            <img className={s.Loader} src={loader2} alt=\"loader\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport axios from \"axios\";\r\nimport { Follow, SetCurrentPage, SetTotalUsersCount, SetUsers, ToggleIsFetching, Unfollow, UserType } from \"../../redux/UsersReducer\";\r\nimport UsersAPIComponent from \"./UsersAPIComponent\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport { usersApi } from \"../../api/api\";\r\nimport { ToggleFollowingInProgress } from './../../redux/UsersReducer';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    isFetching: boolean\r\n    \r\n    Follow: (id: number) => void\r\n    Unfollow: (id: number) => void\r\n    SetUsers: (users: Array<UserType>) => void\r\n    SetCurrentPage: (currentPage: number) => void\r\n    SetTotalUsersCount: (totalCount: number) => void\r\n    ToggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: number[]\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n}\r\n\r\nclass UsersClass extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.ToggleIsFetching(true);\r\n        usersApi.getUsers(this.props.currentPage, this.props.pageSize).then(\r\n            data => {\r\n                setTimeout(() => this.props.ToggleIsFetching(false), 200)\r\n                // this.props.toggleIsFetching(false)\r\n                this.props.SetUsers(data.items)\r\n                this.props.SetTotalUsersCount(data.totalCount)\r\n            }\r\n        );\r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.SetCurrentPage(page)\r\n        this.props.ToggleIsFetching(true);\r\n        usersApi.getUsers(page, this.props.pageSize).then(\r\n            data => {\r\n                setTimeout(() => this.props.ToggleIsFetching(false), 200)\r\n                //this.props.toggleIsFetching(false);\r\n                this.props.SetUsers(data.items)\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <UsersAPIComponent\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    onPageChanged={this.onPageChanged}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.Follow}\r\n                    unfollow={this.props.Unfollow} \r\n                    ToggleFollowingInProgress={this.props.ToggleFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n//     return {\r\n//         follow: (id: number) => { dispatch(FollowAC(id)) },\r\n//         unfollow: (id: number) => { dispatch(UnfollowAC(id)) },\r\n//         setUsers: (users: Array<UserType>) => { dispatch(SetUsersAC(users)) },\r\n//         setCurrentPage: (currentPage: number) => { dispatch(SetCurrentPageAC(currentPage)) },\r\n//         setTotalUsersCount: (totalCount: number) => { dispatch(SetTotalUsersCountAC(totalCount)) },\r\n//         toggleIsFetching: (isFetching: boolean) => { dispatch(ToggleIsFetchingAC(isFetching)) }\r\n//     }\r\n// }\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {Follow, Unfollow, SetUsers, SetCurrentPage, SetTotalUsersCount, ToggleIsFetching, ToggleFollowingInProgress})(UsersClass);","import { PostType } from \"./store\";\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\n\r\ntype ContactsType = {\r\n    facebook: string | null;\r\n    website: string | null;\r\n    vk: string | null;\r\n    twitter: string | null;\r\n    instagram: string | null;\r\n    youtube: string | null;\r\n    github: string | null;\r\n    mainLink: string | null;\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype ProfilePageType = {\r\n    postData: Array<PostType>\r\n    newPostText: string\r\n    profile: ProfileType | null\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    postData: [\r\n        { id: 1, message: \"hi, how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"it is my firt post\", likesCount: 15 },\r\n        { id: 2, message: \"aaaaaa\", likesCount: 1 }\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null \r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let id = state.postData.length + 1;\r\n            let newPost = { id: id, message: state.newPostText, likesCount: 0 };\r\n            return {...state, postData: [...state.postData, newPost], newPostText: \"\"};\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {...state, newPostText: action.payload.newText};\r\n        }\r\n        case SET_USER_PROFILE : {\r\n            return {...state, profile: action.payload.profile}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType = addPostACType | updateNewPostTextACType | SetUserProfileACType;\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\n\r\nexport type updateNewPostTextACType = ReturnType<typeof updateNewPostTextAC>\r\nexport const updateNewPostTextAC = (text: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        payload: {\r\n            newText: text\r\n        }\r\n    } as const\r\n}\r\nexport type SetUserProfileACType = ReturnType<typeof SetUserProfile>\r\nexport const SetUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {\r\n            profile: profile\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\nexport default ProfileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n            <div className={s.item}><img src=\"https://cs13.pikabu.ru/avatars/2487/x2487329-146029786.png\" alt=\"avatar\"></img>\r\n                {props.message}  \r\n                <span className={s.likesCount}>{props.likesCount} likes</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text)\r\n    }\r\n\r\n    let postsItems = props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    return (\r\n        <div className={s.PostsContainer}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addPostAC, updateNewPostTextAC } from '../../../redux/ProfileReducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../redux/store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: () => {dispatch(addPostAC())},\r\n        updateNewPostText: (text: string) => {dispatch(updateNewPostTextAC(text))} \r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\n\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ProfileInfoPrpsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileInfo: React.FC<any> = (props: ProfileInfoPrpsType) => {\r\n    debugger\r\n    if(!props.profile) {\r\n        return <div><Preloader/></div>\r\n    }\r\n    return (\r\n        <div className={s.InfoContainer}>\r\n            <div className={s.ProfilePhoto}>\r\n                {/* <img src='https://thumbs.dreamstime.com/b/большие-данные-и-интернет-тенденции-вещей-рабочее-место-специалисту-132754575.jpg' alt='aaa' /> */}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.Avatar}>\r\n                    <img src={props.profile.photos.small} alt=\"\" />\r\n                </div>\r\n                <div className={s.description}>\r\n                    <div className={s.Name}>{props.profile.fullName}</div>\r\n                    <div className={s.About}>{props.profile.aboutMe}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { ProfileType, SetUserProfile } from \"../../redux/ProfileReducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProdileInfo/ProfileInfo\";\r\nimport s from \"./Profile.module.css\";\r\n\r\n\r\ntype ProfileContainerPropsType = {\r\n    profile: ProfileType | null\r\n    SetUserProfile: (profile: ProfileType) => void\r\n    match: any\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n    \r\n    componentDidMount() {\r\n        debugger\r\n        let userId = this.props.match?.params.userId;\r\n        if(!userId || userId === \":userId\") {\r\n            userId = \"3\";\r\n        }\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId, {\r\n            withCredentials: true,\r\n            headers: {\r\n                'API-KEY': 'c4deeac1-451b-4ef8-8dc8-a4ffeee3c9cc'\r\n            }\r\n        }).then(\r\n            response => {\r\n                this.props.SetUserProfile(response.data)\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.mainContent}>\r\n                <ProfileInfo profile={this.props.profile}/>\r\n                <MyPostsContainer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet WithURLContainer = withRouter<any, any>(ProfileContainer);\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {SetUserProfile})(WithURLContainer);","export default __webpack_public_path__ + \"static/media/logo.5f0a2246.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\";\r\nimport reactLogo from '../../img/logo.png'\r\n\r\ntype HeaderPropsType = {\r\n  setUserData: (id: number | null, email: string | null, login: string | null) => void\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nconst Header: React.FC<any> = (props: HeaderPropsType) => {\r\n  return <header className={s.header}>\r\n    <img src={reactLogo} alt=\"logo\" />\r\n    <div className={s.LoginBlock}>\r\n      {props.isAuth ? \r\n      props.login : \r\n      <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n  </header>\r\n}\r\nexport default Header;","const SET_USER_DATA = \"SET_USER_DATA\"\r\n\r\ntype initialStateType = {\r\n        id: number | null\r\n        email: string | null\r\n        login: string | null\r\n        isAuth: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n        id: null, \r\n        email: null,\r\n        login: null,\r\n        isAuth: false\r\n}\r\n\r\nconst AuthReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch(action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setUserDataACType;\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id, \r\n            email, \r\n            login\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setUserDataACType = ReturnType<typeof setUserData>\r\n\r\nexport default AuthReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport { connect } from \"react-redux\";\r\nimport { setUserData } from './../../redux/AuthReducer';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype HeaderContainerPropsType = {\r\n    setUserData: (id: number | null, email: string | null, login: string | null) => void\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n            withCredentials: true,\r\n            headers: {\r\n                'API-KEY': 'c4deeac1-451b-4ef8-8dc8-a4ffeee3c9cc'\r\n            }\r\n        })\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n               \r\n                let {id, email, login} = response.data.data;\r\n                this.props.setUserData(id, email, login);\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setUserData})(HeaderContainer);","import React from 'react';\nimport './App.css';\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from './Components/Settings/Settings';\nimport {Route} from 'react-router-dom'\nimport { StateType} from './redux/store';\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport { UsersContainer } from './Components/Users/UsersContainer';\nimport ProfileContainer from './Components/Profile/ProfileContainer';\nimport HeaderContainer from './Components/Header/HeaderContainer';\n\n//* урок 61 закончен\n\ntype AppPropsType = {\n  state?: StateType\n  dispatch?: (action: any) => void\n  store?: any\n}\n\nconst App: React.FC<AppPropsType> = (props) => {\n  return (\n      <div className=\"App\">\n        <HeaderContainer/>\n        <NavbarContainer />\n        <div className=\"app-wrapper-content\">\n          \n          <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n          <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n          <Route path='/news'render={() => <News/>}/>\n          <Route path='/music' render={() => <Music/>}/>\n          <Route path='/settings' render={() => <Settings/>} />\n          <Route path='/users' render={() => <UsersContainer/>} />\n        \n        </div> \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SidebarPageType } from \"./store\"\r\n\r\nlet initialState: SidebarPageType = {\r\n    friends: [\r\n        { id: 1, name: \"Dimych\", link: \"https://cs6.pikabu.ru/avatars/404/x404070-828004264.png\" },\r\n        { id: 2, name: \"Andrey\", link: \"https://aftershock.news/sites/default/files/pictures/picture-42471-1586248390.jpg\" },\r\n        { id: 3, name: \"Sveta\", link: \"https://www.meme-arsenal.com/memes/cdfd31e349e0124972afec8440807b32.jpg\" }\r\n    ]\r\n}\r\n\r\nconst SidebarReducer = (state: SidebarPageType = initialState, action: GeneralACType) => {\r\n\r\n    return state\r\n}\r\n\r\ntype GeneralACType = void;\r\n\r\nexport default SidebarReducer;","import { combineReducers, createStore } from \"redux\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport MessagesReducer from \"./MessagesReducer\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport SidebarReducer from \"./SidebarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    sidebar: SidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nlet store = createStore(reducers);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StateType} from './redux/store';\nimport { Provider } from 'react-redux';\n\n\n\nlet rerenderEntireTree = (state: StateType) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <BrowserRouter>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}