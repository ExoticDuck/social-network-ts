{"version":3,"sources":["Components/Preloader/Preloader.module.css","Components/Profile/Profile.module.css","Components/Login/Login.module.css","Components/Users/Users.module.css","Components/Navbar/Navbar.module.css","reportWebVitals.ts","api/api.ts","redux/AuthReducer.ts","redux/MessagesReducer.ts","redux/ProfileReducer.ts","redux/SidebarReducer.ts","utils/object-helper.ts","redux/UsersReducer.ts","redux/AppReducer.ts","redux/redux-store.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","utils/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Components/Dialogs/Dialogs.tsx","HOC/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx","Components/Navbar/Navbar.tsx","Components/Navbar/NavbarContainer.tsx","Components/Paginator/Paginator.tsx","img/user.png","Components/Users/User.tsx","Components/Users/UsersAPIComponent.tsx","img/loader2.gif","Components/Preloader/Preloader.tsx","redux/users-selectors.ts","Components/Users/UsersContainer.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/ProdileInfo/ProfileStatus.tsx","Components/Profile/ProdileInfo/ProfileInfo.tsx","Components/Profile/ProfileContainer.tsx","img/logo.png","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","App.tsx","index.tsx","Components/Profile/ProdileInfo/ProfileInfo.module.css","Components/Dialogs/Dialogs.module.css","Components/Profile/MyPosts/MyPosts.module.css","utils/FormsControls/FormControl.module.css","Components/Paginator/Paginator.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","usersApi","currentPage","pageSize","get","response","data","userId","profileApi","status","put","authApi","email","password","rememberMe","post","delete","followApi","follow","unfollow","SET_USER_DATA","initialState","id","login","isAuth","setUserData","type","payload","getAuthUserData","dispatch","a","resultCode","AuthReducer","state","action","SEND_MESSAGE","dialogsData","name","messagesData","text","MessagesReducer","length","newMessage","value","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","postData","message","likesCount","profile","SetUserStatus","ProfileReducer","newPost","filter","p","friends","link","SidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETHING","TOGGLE_FOLLOWING_IN_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","Follow","Unfollow","SetUsers","SetCurrentPage","SetTotalUsersCount","totalCount","ToggleIsFetching","ToggleFollowingInProgress","following","followUnfollowFlow","apiMethod","actionCreator","UsersReducer","followed","SET_INITIALIZED","initialized","AppReducer","reducers","combineReducers","profilePage","messagesPage","sidebar","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","News","Music","Settings","FormControl","input","meta","touched","error","children","hasError","className","s","formControl","Textarea","props","restProps","child","Input","createField","placeholder","validators","component","Field","validate","maxLengthCreator","maxLength","requiredField","DialogItem","path","dialog","to","Message","maxLength100","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Dialogs","dialogItems","dialogsPage","d","messagesItems","m","dialogs","dialogs_items","messages","values","addMessage","newMessageBody","mapStateToProps","withAuthRedirect","Component","connect","DialogsContainer","compose","addMessageAC","Navbar","friendsItems","fr","friend","src","alt","nav","isActive","NavbarContainer","Paginator","pagesCount","Math","ceil","pages","i","push","PagesContainer","page","onClick","e","onPageChanged","SelectedPage","User","user","UserCard","avatarBlock","Avatar","photos","small","userPic","infoBlock","userInfo","Status","location","followBox","disabled","some","FollowButton","UsersAPIComponent","UsersPage","Preloader","Loader","loader2","getUsersSelector","getUsersSuper","createSelector","u","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getIsFetchingSelector","getFollowingProgressSelector","UsersClass","getUsers","this","React","UsersContainer","bind","setTimeout","Post","MyPosts","memo","postsItems","posts","PostsContainer","AddPostFormRedux","addPost","maxLength10","Form","Textfield","ButtonBox","MyPostsContainer","addPostAC","ProfileStatus","useState","setStatus","editMode","setEditMode","useEffect","onDoubleClick","autoFocus","onChange","currentTarget","onBlur","updateUserStatus","ProfileInfo","InfoContainer","ProfilePhoto","descriptionBlock","userFoto","description","Name","fullName","ProfileContainer","match","params","authorizedUserId","toString","history","getUserProfile","getUserStatus","mainContent","ProfileContainerCompose","withRouter","Header","header","reactLogo","LoginBlock","logout","HeaderContainer","LoginForm","undefined","formSummaryError","LoginReduxForm","stopSubmit","_error","LoginPage","formData","App","initializeApp","render","AppContainer","promise","Promise","all","SocialNetworkApp","StrictMode","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e242fe4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Preloader_Loader__3O9yV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__1v0_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"Login_LoginPage__1tX-g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersPage\":\"Users_UsersPage__3vOf4\",\"Avatar\":\"Users_Avatar__Uezqs\",\"followBox\":\"Users_followBox__G_ywg\",\"FollowButton\":\"Users_FollowButton__3tp_j\",\"UserCard\":\"Users_UserCard__1P3-U\",\"avatarBlock\":\"Users_avatarBlock__aj0Au\",\"userInfo\":\"Users_userInfo__34aiX\",\"Status\":\"Users_Status__3Bdku\",\"location\":\"Users_location__1rnO4\",\"infoBlock\":\"Users_infoBlock__1ZxRK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__DF114\",\"item\":\"Navbar_item__EPJmQ\",\"active-link\":\"Navbar_active-link__3FqVw\",\"friend\":\"Navbar_friend__1GKxm\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0`,\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a51c385e-38b4-45b2-933a-739b6104467f'\r\n    }\r\n})\r\n\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\n\r\nexport const authApi = {\r\n    getMe() {\r\n        return instance.get(`https://social-network.samuraijs.com/api/1.0/auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const followApi = {\r\n    follow(userId: number) {\r\n        return instance.post(`/follow/${userId}`, {}, {})\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`/follow/${userId}`)\r\n    }\r\n}\r\n\r\n","import { Dispatch } from \"redux\"\r\nimport { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { authApi } from \"../api/api\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst SET_USER_DATA = \"social-network/auth/SET_USER_DATA\"\r\n\r\ntype initialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst AuthReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setUserDataACType | FormAction;\r\n\r\nexport const setUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setUserDataACType = ReturnType<typeof setUserData>\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, GeneralACType>;\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let response = await authApi.getMe();\r\n            if (response.data.resultCode === 0) {\r\n                let { id, email, login } = response.data.data;\r\n                dispatch(setUserData(id, email, login, true));\r\n            }\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await authApi.login(email, password, rememberMe);\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(getAuthUserData());\r\n                } else {\r\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                    dispatch(stopSubmit(\"login\", { _error: message }));\r\n                }\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return async (dispatch: Dispatch) => {\r\n       let response = await authApi.logout()\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setUserData(null, null, null, false))\r\n                }\r\n    }\r\n}\r\n\r\nexport default AuthReducer;","import {MessagePageType} from \"./store\"\r\n\r\nconst SEND_MESSAGE = \"ADD-MESSAGE\";\r\n\r\nlet initialState: MessagePageType = {\r\n    dialogsData: [\r\n        { id: 1, name: \"Dimych\" },\r\n        { id: 2, name: \"Andrey\" },\r\n        { id: 3, name: \"Sveta\" },\r\n        { id: 4, name: \"Sasha\" },\r\n        { id: 5, name: \"Viktor\" },\r\n        { id: 6, name: \"Valery\" },\r\n    ],\r\n    messagesData: [\r\n        { id: 1, text: \"Hi\" },\r\n        { id: 2, text: \"How are you?\" },\r\n        { id: 3, text: \"What are you doing?\" },\r\n        { id: 4, text: \"Hello my friend;)\" },\r\n        { id: 5, text: \"Yo!\" },\r\n        { id: 6, text: \"Goodbye!\" },\r\n    ]\r\n}\r\n\r\nconst MessagesReducer = (state: MessagePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let id = state.messagesData.length + 1;\r\n            let newMessage = {id: id, text: action.payload.value};\r\n            return {...state, messagesData: [...state.messagesData, newMessage]}\r\n            \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType =  addMessageACType;\r\n\r\nexport type addMessageACType = ReturnType<typeof addMessageAC>\r\nexport const addMessageAC = (value: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        payload: {\r\n            value\r\n        }\r\n    } as const\r\n}\r\n\r\nexport default MessagesReducer;","import { Dispatch } from \"redux\";\r\nimport { profileApi, usersApi } from \"../api/api\";\r\nimport { PostType } from \"./store\";\r\n\r\n\r\nconst ADD_POST = \"social-network/profile/ADD-POST\";\r\nconst SET_USER_PROFILE = \"social-network/profile/SET-USER-PROFILE\";\r\nconst SET_STATUS = \"social-network/profile/SET-USER-STATUS\";\r\nconst DELETE_POST = \"social-network/profile/DELETE-POST\"\r\n\r\ntype ContactsType = {\r\n    facebook: string | null;\r\n    website: string | null;\r\n    vk: string | null;\r\n    twitter: string | null;\r\n    instagram: string | null;\r\n    youtube: string | null;\r\n    github: string | null;\r\n    mainLink: string | null;\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype ProfilePageType = {\r\n    postData: Array<PostType>\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\n\r\nlet initialState: ProfilePageType = {\r\n    postData: [\r\n        { id: 1, message: \"hi, how are you?\", likesCount: 12 },\r\n        { id: 2, message: \"it is my firt post\", likesCount: 15 },\r\n        { id: 3, message: \"aaaaaa\", likesCount: 1 }\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst ProfileReducer = (state: ProfilePageType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let id = state.postData.length + 1;\r\n            let newPost = { id: id, message: action.payload.text, likesCount: 0 };\r\n            return { ...state, postData: [...state.postData, newPost]};\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return { ...state, profile: action.payload.profile }\r\n        }\r\n        case SET_STATUS: {\r\n            debugger\r\n            return {...state, status: action.payload.status}\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, postData: state.postData.filter(p => p.id !== action.payload.id)}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type GeneralACType = addPostACType | SetUserProfileACType | SetUserStatusACType | deletePostACType;\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (text: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: {\r\n            text\r\n        }\r\n    } as const\r\n}\r\nexport type deletePostACType = ReturnType<typeof deletePostAC>\r\nexport const deletePostAC = (id: number) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type SetUserProfileACType = ReturnType<typeof SetUserProfile>\r\nexport const SetUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {\r\n            profile: profile\r\n        }\r\n    } as const\r\n}\r\nexport type SetUserStatusACType = ReturnType<typeof SetUserStatus>\r\nexport const SetUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        payload: {\r\n            status: status\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: number) => {\r\n    return async (dispatch: Dispatch) => usersApi.getProfile(userId)\r\n    .then(\r\n        response => {\r\n        dispatch(SetUserProfile(response.data));\r\n    });\r\n}\r\n\r\nexport const getUserStatus = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await profileApi.getStatus(userId)\r\n        dispatch(SetUserStatus(response.data))\r\n    }    \r\n}\r\n\r\nexport const updateUserStatus = (status: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n    let response = await profileApi.updateStatus(status)\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(SetUserStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport default ProfileReducer;","import {SidebarPageType } from \"./store\"\r\n\r\nlet initialState: SidebarPageType = {\r\n    friends: [\r\n        { id: 1, name: \"Dimych\", link: \"https://cs6.pikabu.ru/avatars/404/x404070-828004264.png\" },\r\n        { id: 2, name: \"Andrey\", link: \"https://aftershock.news/sites/default/files/pictures/picture-42471-1586248390.jpg\" },\r\n        { id: 3, name: \"Sveta\", link: \"https://www.meme-arsenal.com/memes/cdfd31e349e0124972afec8440807b32.jpg\" }\r\n    ]\r\n}\r\n\r\nconst SidebarReducer = (state: SidebarPageType = initialState, action: GeneralACType) => {\r\n\r\n    return state\r\n}\r\n\r\ntype GeneralACType = void;\r\n\r\nexport default SidebarReducer;","export const updateObjectInArray = (items: any[], itemId: number, objPropName: string, newObjProps: any) => {\r\nreturn items.map(item => {\r\n    if (item[objPropName] === itemId) {\r\n        let userCopy = { ...item, ...newObjProps};\r\n        return userCopy;\r\n    }\r\n    return item;\r\n})\r\n}","import { AxiosResponse } from \"axios\"\r\nimport { Dispatch } from \"redux\"\r\nimport { followApi, usersApi } from \"../api/api\"\r\nimport { updateObjectInArray } from './../utils/object-helper';\r\n\r\n\r\nconst FOLLOW = \"social-network/users/FOLLOW\"\r\nconst UNFOLLOW = \"social-network/users/UNFOLLOW\"\r\nconst SET_USERS = \"social-network/users/SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"social-network/users/SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"social-network/users/SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETHING = \"social-network/users/TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = \"social-network/users/TOGGLE-FOLLOWING-IN-PROGRESS\"\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: null,\r\n    photos: {\r\n        small: null | any,\r\n        large: null | any\r\n    },\r\n    status: null | string,\r\n    followed: boolean\r\n}\r\n\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nconst UsersReducer = (state: UsersPageType = initialState, action: UsersACType) => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.id, \"id\", {followed: true})\r\n            };\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.id, \"id\", {followed: false})\r\n            };\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.payload.users]\r\n            };\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.payload.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.payload.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.payload.following ? [...state.followingInProgress, action.payload.userId] : [...state.followingInProgress.filter(id => id !== action.payload.userId)]\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport type UsersACType = FollowACType | UnfollowACType | SetUsersACType | SetCurrentPageACType | SetTotalUsersCountACType | ToggleIsFetchingACType | ToggleFollowingInProgressACType;\r\n\r\nexport type FollowACType = ReturnType<typeof Follow>\r\nexport const Follow = (id: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type UnfollowACType = ReturnType<typeof Unfollow>\r\nexport const Unfollow = (id: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            id\r\n        }\r\n    } as const\r\n}\r\nexport type SetUsersACType = ReturnType<typeof SetUsers>\r\nexport const SetUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users: users\r\n        }\r\n    } as const\r\n}\r\nexport type SetCurrentPageACType = ReturnType<typeof SetCurrentPage>\r\nexport const SetCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage\r\n        }\r\n    } as const\r\n}\r\nexport type SetTotalUsersCountACType = ReturnType<typeof SetTotalUsersCount>\r\nexport const SetTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            totalCount\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleIsFetchingACType = ReturnType<typeof ToggleIsFetching>\r\nexport const ToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETHING,\r\n        payload: {\r\n            isFetching: isFetching\r\n        }\r\n    } as const\r\n}\r\nexport type ToggleFollowingInProgressACType = ReturnType<typeof ToggleFollowingInProgress>\r\nexport const ToggleFollowingInProgress = (following: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n        payload: {\r\n            following,\r\n            userId\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(ToggleIsFetching(true));\r\n        dispatch(SetCurrentPage(currentPage));\r\n        let data = await usersApi.getUsers(currentPage, pageSize)\r\n        setTimeout(() => dispatch(ToggleIsFetching(false)), 200)\r\n        dispatch(SetUsers(data.items));\r\n        dispatch(SetTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\ntype apiMethodType = (userId: number) => Promise<AxiosResponse<any, any>>\r\ntype actionCreatorType = typeof Follow | typeof Unfollow;\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: apiMethodType, actionCreator: actionCreatorType) => {\r\n    dispatch(ToggleFollowingInProgress(true, userId))\r\n        let response = await apiMethod(userId)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actionCreator(userId));\r\n        }\r\n        dispatch(ToggleFollowingInProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, followApi.follow.bind(userId), Follow);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, followApi.unfollow.bind(userId), Unfollow);\r\n    }\r\n}\r\n\r\n\r\nexport default UsersReducer;","import { ThunkAction } from \"redux-thunk\"\r\nimport { AppStateType } from \"./redux-store\"\r\nimport { getAuthUserData } from './AuthReducer';\r\n\r\nconst SET_INITIALIZED = \"SET-INITIALIZED\";\r\n\r\ntype initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst AppReducer = (state: initialStateType = initialState, action: GeneralACType) => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\ntype GeneralACType = setInitializedACType;\r\n\r\nexport const setInitialized = () => {\r\n    return {\r\n        type: SET_INITIALIZED\r\n    } as const\r\n}\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, GeneralACType>;\r\nexport type setInitializedACType = ReturnType<typeof setInitialized>\r\n\r\nexport const initializeApp = ():ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n    dispatch(setInitialized())\r\n  });\r\n}\r\n\r\nexport default AppReducer;","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport AuthReducer from \"./AuthReducer\";\r\nimport MessagesReducer from \"./MessagesReducer\";\r\nimport ProfileReducer from \"./ProfileReducer\";\r\nimport SidebarReducer from \"./SidebarReducer\";\r\nimport UsersReducer from \"./UsersReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer } from 'redux-form';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    sidebar: SidebarReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    form: formReducer, \r\n    app: AppReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>;\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\nconst Music: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC<any> = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./FormControl.module.css\"\r\nimport { Field } from 'redux-form';\r\nimport { requiredField } from \"../validators/validators\";\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children, ...props }: any) => {\r\n    let hasError = touched && error;\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            {children}\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const { input, meta, child, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const { input, meta, child, ...restProps } = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n    )\r\n}\r\n\r\ntype componentType = typeof Input | typeof Textarea;\r\ntype validatorsType = typeof requiredField;\r\n\r\nexport const createField = (placeholder: string, name: string, validators: Array<validatorsType> | undefined, component: componentType, props: any, text: string = \"\") => {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name} component={component}\r\n            validate={validators} {...props} /> {text}\r\n    </div>\r\n}\r\n","import { AddPostDataType } from \"../../Components/Profile/MyPosts/MyPosts\";\r\n\r\nexport {}\r\ntype GeneralValuesType = AddPostDataType;\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport const requiredField = (value: string) => {\r\n    if(value) {\r\n        return undefined;\r\n    }\r\n        return \"Field is required\";\r\n}\r\n\r\n","import React from 'react';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport {\r\n    MessagePageType\r\n} from '../../redux/store';\r\nimport s from './Dialogs.module.css'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../utils/FormsControls/FormsControls';\r\nimport { requiredField } from '../../utils/validators/validators';\r\nimport { maxLengthCreator } from './../../utils/validators/validators';\r\n\r\nexport type DialogsPropsType = {\r\n    addMessage: (value: string) => void\r\n    updateNewMessageText: (text: string) => void\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let path = \"/dialgs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let dialogItems = props.dialogsPage.dialogsData.map((d) => <DialogItem name={d.name} id={d.id} />);\r\n    let messagesItems = props.dialogsPage.messagesData.map((m) => <Message text={m.text} />);\r\n\r\n    let addNewMessage = (values: AddMessageType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItems}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype AddMessageType = {\r\n    newMessageBody: string\r\n}\r\nlet maxLength100 = maxLengthCreator(100);\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' component={Textarea} placeholder=\"Enter your message\" \r\n                validate={[requiredField, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, { Component, ComponentType } from \"react\"\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if(!isAuth) return <Redirect to=\"/login\"/>\r\n        \r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n    return ConnectedRedirectComponent;\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { compose, Dispatch } from 'redux';\r\nimport { addMessageAC} from '../../redux/MessagesReducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { MessagePageType } from '../../redux/store';\r\nimport Dialogs, { DialogsPropsType } from './Dialogs';\r\nimport { withAuthRedirect } from './../../HOC/WithAuthRedirect';\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: MessagePageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => { //принимает в параметры state\r\n    return { //для данных из стейта \r\n        dialogsPage: state.messagesPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return { //для коллбэков\r\n        addMessage: (value: string) => {dispatch(addMessageAC(value))}\r\n    }\r\n}\r\n\r\nlet DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Navbar.module.css\"\r\nimport '../../App.css';\r\nimport { SidebarPageType } from '../../redux/store';\r\n\r\ntype NavbarPropsType = {\r\n  state: SidebarPageType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarPropsType> = (props) => {\r\n\r\n  let friendsItems = props.state.friends.map((fr) => {\r\n    return <div className={s.friend}><img src={fr.link} alt=\"img\"/>{fr.name}</div>\r\n  })\r\n\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile/:userId\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" className={(isActive) => isActive ? \"active-link\" : \"\"}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Settings</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" className={(isActive) => isActive ? \"active-link\" : \"\"}>Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <div className={s.friends}>Friends</div>\r\n        {friendsItems}\r\n      </div>\r\n    </nav>);\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { SidebarPageType } from '../../redux/store';\r\nimport Navbar from './Navbar';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    state: SidebarPageType\r\n} \r\n\r\ntype mapDispatchToPropsType = {}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.sidebar\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {}\r\n}\r\n\r\nlet NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","import React from \"react\";\r\nimport s from \"./Paginator.module.css\"\r\n\r\n\r\nexport type UsersAPIPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n}\r\n\r\nconst Paginator = (props: UsersAPIPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    pages.length = 20;\r\n\r\n    return (\r\n            <div className={s.PagesContainer}>\r\n                {\r\n                    pages.map(page => <span onClick={(e) => { props.onPageChanged(page) }} className={props.currentPage === page ? s.SelectedPage : s.page}>{page} </span>)\r\n                }\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.02d5ce4f.png\";","import React from \"react\";\r\nimport { UserType } from \"../../redux/UsersReducer\";\r\nimport s from \"./Users.module.css\"\r\nimport userPic from \"../../img/user.png\"\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type UserPropsType = {\r\n    user: UserType\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst User = ({user, follow, unfollow, followingInProgress}: UserPropsType) => {\r\n\r\n    return (\r\n                <div key={user.id} className={s.UserCard}>\r\n                    <span className={s.avatarBlock}>\r\n                        <div className={s.Avatar}>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPic} alt=\"Avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n\r\n                    </span>\r\n                    <div className={s.infoBlock}>\r\n                        <span className={s.userInfo}>\r\n                            <div>{user.name}</div>\r\n                            <div className={s.Status}>{user.status}</div>\r\n                        </span>\r\n                        <span className={s.location}>\r\n                            <div>{'Country'}</div>\r\n                            <div>{'City'}</div>\r\n                        </span>\r\n                        <div className={s.followBox}>\r\n                            {\r\n                                user.followed ? <button disabled={followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    unfollow(user.id)\r\n                                }}>Unfollow</button> : <button disabled={followingInProgress.some(id => id === user.id)} className={s.FollowButton} onClick={() => {\r\n                                    follow(user.id)\r\n                                }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport { UserType } from \"../../redux/UsersReducer\";\r\nimport s from \"./Users.module.css\"\r\nimport Paginator from \"../Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\nexport type UsersAPIPropsType = {\r\n    users: Array<UserType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (page: number) => void\r\n    currentPage: number\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nconst UsersAPIComponent = ({users, follow, unfollow, totalUsersCount, pageSize, onPageChanged, currentPage, ToggleFollowingInProgress, followingInProgress, ...props}: UsersAPIPropsType) => {\r\n\r\n    return (\r\n        <div className={s.UsersPage}>\r\n            <Paginator currentPage={currentPage} totalUsersCount={totalUsersCount} pageSize={pageSize} onPageChanged={onPageChanged}/>\r\n            {\r\n                users.map(user => <User user={user} follow={follow} unfollow={unfollow} followingInProgress={followingInProgress}/>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersAPIComponent;","export default __webpack_public_path__ + \"static/media/loader2.f396a593.gif\";","import React from \"react\";\r\nimport loader2 from \"../../img/loader2.gif\"\r\nimport s from \"./Preloader.module.css\"\r\n\r\ntype PreloaderPropsType = {\r\n\r\n}\r\n\r\nconst Preloader = (props: PreloaderPropsType) => {\r\n    return(\r\n        <div>\r\n            <img className={s.Loader} src={loader2} alt=\"loader\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\nimport { UserType } from \"./UsersReducer\";\r\n\r\nexport const getUsersSelector = (state: AppStateType):UserType[] => {\r\n    return state.usersPage.users;\r\n}\r\nexport const getUsersFilterSelector = (state: AppStateType):UserType[] => {\r\n    return getUsersSelector(state).filter(u => true);\r\n}\r\n\r\nexport const getUsersSuper = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSizeSelector = (state: AppStateType):number => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state: AppStateType):number => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPageSelector = (state: AppStateType):number => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetchingSelector = (state: AppStateType):boolean => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingProgressSelector = (state: AppStateType):number[] => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { follow, getUsers, SetCurrentPage, SetTotalUsersCount, SetUsers, ToggleIsFetching, unfollow, UserType } from \"../../redux/UsersReducer\";\r\nimport UsersAPIComponent from \"./UsersAPIComponent\";\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport { ToggleFollowingInProgress } from './../../redux/UsersReducer';\r\nimport { getPageSizeSelector, getTotalUsersCountSelector, getCurrentPageSelector, getIsFetchingSelector, getFollowingProgressSelector, getUsersSuper } from './../../redux/users-selectors';\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: number[]\r\n}\r\n\r\n// type mapDispatchToPropsType = {\r\n//     follow: (id: number) => void\r\n//     unfollow: (id: number) => void\r\n//     setUsers: (users: Array<UserType>) => void\r\n//     setCurrentPage: (currentPage: number) => void\r\n//     setTotalUsersCount: (totalCount: number) => void\r\n//     toggleIsFetching: (isFetching: boolean) => void\r\n// }\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    isFetching: boolean\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    SetUsers: (users: Array<UserType>) => void\r\n    SetCurrentPage: (currentPage: number) => void\r\n    SetTotalUsersCount: (totalCount: number) => void\r\n    ToggleIsFetching: (isFetching: boolean) => void\r\n    followingInProgress: number[]\r\n    ToggleFollowingInProgress: (following: boolean, userId: number) => void\r\n}\r\n\r\nclass UsersClass extends React.Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize); \r\n        //*передаем параметры для thunk-creator \r\n    }\r\n\r\n    onPageChanged = (page: number) => {\r\n        this.props.getUsers(page, this.props.pageSize); \r\n        this.props.SetCurrentPage(page);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <UsersAPIComponent\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    onPageChanged={this.onPageChanged}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow} \r\n                    ToggleFollowingInProgress={this.props.ToggleFollowingInProgress}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: getUsersSuper(state),\r\n        pageSize: getPageSizeSelector(state),\r\n        totalUsersCount: getTotalUsersCountSelector(state),\r\n        currentPage: getCurrentPageSelector(state),\r\n        isFetching: getIsFetchingSelector(state),\r\n        followingInProgress: getFollowingProgressSelector(state)\r\n    }\r\n}\r\n\r\nexport const UsersContainer = connect(mapStateToProps, {follow, \r\n    unfollow, SetUsers, SetCurrentPage, SetTotalUsersCount, \r\n    ToggleIsFetching, ToggleFollowingInProgress, getUsers})(UsersClass);","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n            <div className={s.item}><img src=\"https://cs13.pikabu.ru/avatars/2487/x2487329-146029786.png\" alt=\"avatar\"></img>\r\n                {props.message}  \r\n                <span className={s.likesCount}>{props.likesCount} likes</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { requiredField, maxLengthCreator } from './../../../utils/validators/validators';\r\nimport { Textarea } from '../../../utils/FormsControls/FormsControls';\r\n\r\ntype PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (text: string) => void\r\n}\r\n\r\n// class MyPosts extends React.PureComponent<MyPostsPropsType> {\r\n\r\n    \r\n//     render() {\r\n//         let postsItems = this.props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n//         let addNewPost = (values: AddPostDataType) => {\r\n//             this.props.addPost(values.post)\r\n//         }\r\n\r\n//         return (\r\n//             <div className={s.PostsContainer}>\r\n//                 <h3>My posts</h3>\r\n//                 <AddPostFormRedux onSubmit={addNewPost} />\r\n//                 <div className={s.posts}>\r\n//                     {postsItems}\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n \r\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsItems = props.posts.map((p) => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n    let addNewPost = (values: AddPostDataType) => {\r\n        props.addPost(values.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.PostsContainer}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsItems}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport type AddPostDataType = {\r\n    post: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddPostForm: React.FC<InjectedFormProps<AddPostDataType>> = (props) => {\r\n    return (\r\n        <form className={s.Form} onSubmit={props.handleSubmit}>\r\n            <div className={s.Textfield}>\r\n                <Field name='post' component={Textarea} validate={[requiredField, maxLength10]} />\r\n            </div>\r\n            <div className={s.ButtonBox}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddPostFormRedux = reduxForm<AddPostDataType>({\r\n    form: \"addPostForm\"\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { addPostAC } from '../../../redux/ProfileReducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../redux/store';\r\nimport MyPosts from './MyPosts';\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.postData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (text: string) => {dispatch(addPostAC(text))}\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { updateUserStatus } from '../../../redux/ProfileReducer';\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    debugger\r\n    const [status, setStatus] = useState<string>(props.status);\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={() => {activateEditMode()}}>{props.status || \"status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} autoFocus onChange={onChangeHandler} onBlur={() => {deactivateEditMode()}}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport { ProfileType } from '../../../redux/ProfileReducer';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport userFoto from \"../../../img/user.png\"\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    updateUserStatus: (userId: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<any> = ({profile, updateUserStatus, status}: ProfileInfoPropsType) => {\r\n\r\n    if(!profile) {\r\n        return <div><Preloader/></div>\r\n    }\r\n    return (\r\n        <div className={s.InfoContainer}>\r\n            <div className={s.ProfilePhoto}>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.Avatar}>\r\n                    <img src={profile.photos.small || userFoto} alt=\"\" />\r\n                </div>\r\n                <div className={s.description}>\r\n                    <div className={s.Name}>{profile.fullName}</div>\r\n                    <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { getUserStatus, ProfileType, updateUserStatus} from \"../../redux/ProfileReducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProdileInfo/ProfileInfo\";\r\nimport s from \"./Profile.module.css\";\r\nimport { getUserProfile } from './../../redux/ProfileReducer';\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype ProfileContainerPropsType = {\r\n    profile: ProfileType | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (userId: string) => void\r\n    match: any\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    history: any\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        let userId = this.props.match?.params.userId;\r\n        if (!userId || userId === \":userId\") {\r\n            userId = this.props.authorizedUserId.toString();\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className={s.mainContent}>\r\n                <ProfileInfo profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n                <MyPostsContainer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet ProfileContainerCompose = compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\nexport default ProfileContainerCompose;","export default __webpack_public_path__ + \"static/media/logo.5f0a2246.png\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from \"./Header.module.css\";\r\nimport reactLogo from '../../img/logo.png'\r\n\r\ntype HeaderPropsType = {\r\n  setUserData: (id: number | null, email: string | null, login: string | null) => void\r\n  logout: () => void\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\nconst Header: React.FC<any> = (props: HeaderPropsType) => {\r\n  return <header className={s.header}>\r\n    <img src={reactLogo} alt=\"logo\" />\r\n    <div className={s.LoginBlock}>\r\n      {props.isAuth ? \r\n      <div>{props.login} <button onClick={props.logout}>Logout</button></div> : \r\n      <NavLink to={'/login'}>Login</NavLink>}\r\n    </div>\r\n  </header>\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from './../../redux/AuthReducer';\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype HeaderContainerPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport { InjectedFormProps } from \"redux-form\";\r\nimport { Input } from \"../../utils/FormsControls/FormsControls\";\r\nimport { requiredField } from \"../../utils/validators/validators\";\r\nimport s from \"../../utils/FormsControls/FormControl.module.css\"\r\nimport { createField } from './../../utils/FormsControls/FormsControls';\r\n\r\nexport type FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField(\"Login\", \"login\", [requiredField], Input, {})}\r\n                {createField(\"Password\", \"password\", [requiredField], Input, { type: \"password\" })}\r\n                {createField(\"input\", \"rememberMe\", undefined, Input, { type: \"checkbox\" }, \"Remember me\")}\r\n            {error && <div className={s.formSummaryError}> {error} </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport LoginForm, { FormDataType } from \"./LoginForm\";\r\nimport s from './Login.module.css'\r\nimport { connect } from 'react-redux';\r\nimport { login} from './../../redux/AuthReducer';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    debugger\r\n    if(props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    let onSubmitHandler = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) return <Redirect to=\"/profile\" />\r\n    \r\n\r\n    return (\r\n        <div className={s.LoginPage}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmitHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport './App.css';\nimport News from './Components/News/News';\nimport Music from './Components/Music/Music';\nimport Settings from './Components/Settings/Settings';\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom'\nimport DialogsContainer from './Components/Dialogs/DialogsContainer';\nimport NavbarContainer from './Components/Navbar/NavbarContainer';\nimport { UsersContainer } from './Components/Users/UsersContainer';\nimport ProfileContainer from './Components/Profile/ProfileContainer';\nimport HeaderContainer from './Components/Header/HeaderContainer';\nimport Login from './Components/Login/Login';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/AppReducer';\nimport store, { AppStateType } from './redux/redux-store';\nimport Preloader from './Components/Preloader/Preloader';\n\n//* урок 91 закончен\n\ntype AppPropsType = {\n  initializeApp: () => void\n  initialized: boolean\n}\n\n// const App: React.FC<AppPropsType> = (props) => {\n//   return (\n//       <div className=\"App\">\n//         <HeaderContainer/>\n//         <NavbarContainer />\n//         <div className=\"app-wrapper-content\">\n\n//           <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n//           <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n//           <Route path='/news'render={() => <News/>}/>\n//           <Route path='/music' render={() => <Music/>}/>\n//           <Route path='/settings' render={() => <Settings/>} />\n//           <Route path='/users' render={() => <UsersContainer/>} />\n//           <Route path='/login' render={() => <Login/>} />\n\n//         </div> \n//       </div>\n//   );\n// }\n\nclass App extends React.Component<AppPropsType, {}> {\n  componentDidMount() {\n    this.props.initializeApp();\n  }\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    return (\n      <div className=\"App\">\n        <HeaderContainer />\n        <NavbarContainer />\n        <div className=\"app-wrapper-content\">\n\n          <Route path='/dialogs' render={() => <DialogsContainer />} />\n          <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\n          <Route path='/news' render={() => <News />} />\n          <Route path='/music' render={() => <Music />} />\n          <Route path='/settings' render={() => <Settings />} />\n          <Route path='/users' render={() => <UsersContainer />} />\n          <Route path='/login' render={() => <Login />} />\n\n        </div>\n      </div>\n    )\n  }\n}\n\ntype mapStateToPropsType = {\n  initialized: boolean\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    initialized: state.app.initialized\n  }\n}\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n\nlet SocialNetworkApp = (props: {}) => {\n  return <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>\n} \n\nexport default SocialNetworkApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { StateType} from './redux/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport SocialNetworkApp from './App';\n\n\nlet rerenderEntireTree = (state: StateType) => {\n  ReactDOM.render(\n    <SocialNetworkApp/>,\n    document.getElementById('root')\n  );\n};\n\nrerenderEntireTree(store.getState());\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1v9W_\",\"InfoContainer\":\"ProfileInfo_InfoContainer__3yQRD\",\"ProfilePhoto\":\"ProfileInfo_ProfilePhoto__227Ns\",\"Avatar\":\"ProfileInfo_Avatar__FpOi8\",\"description\":\"ProfileInfo_description__1rKpA\",\"Name\":\"ProfileInfo_Name__3Mhn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2R6vH\",\"dialogs_items\":\"Dialogs_dialogs_items__Ckxz2\",\"active\":\"Dialogs_active__oDa8w\",\"dialog\":\"Dialogs_dialog__25TZP\",\"messages\":\"Dialogs_messages__2x5Gv\",\"message\":\"Dialogs_message__LRm7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__2q_8H\",\"PostsContainer\":\"MyPosts_PostsContainer__1b_Xt\",\"Form\":\"MyPosts_Form__2fstF\",\"Textfield\":\"MyPosts_Textfield__1To51\",\"ButtonBox\":\"MyPosts_ButtonBox__3lvve\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__1ZzNG\",\"error\":\"FormControl_error__3dUKT\",\"formSummaryError\":\"FormControl_formSummaryError__ucq0Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PagesContainer\":\"Paginator_PagesContainer___ctH9\",\"page\":\"Paginator_page__1mmu6\",\"SelectedPage\":\"Paginator_SelectedPage__1TqL6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ZUrT\",\"likesCount\":\"Post_likesCount__3XH3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3X5wX\",\"LoginBlock\":\"Header_LoginBlock__1lnVl\"};"],"sourceRoot":""}